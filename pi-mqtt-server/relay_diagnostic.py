#!/usr/bin/env python3
"""
RELAY Diagnostic Tool for Fish Feeder Arduino
=============================================
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á RELAY commands ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤

Usage:
    python3 relay_diagnostic.py
"""

import serial
import serial.tools.list_ports
import time
import sys

class RelayDiagnostic:
    def __init__(self):
        self.serial_conn = None
        self.connected = False
        
    def find_arduino(self):
        """‡∏´‡∏≤ Arduino port ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        print("üîç Searching for Arduino...")
        
        # ‡∏•‡∏≥‡∏î‡∏±‡∏ö port ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
        possible_ports = []
        
        # Windows
        for i in range(10):
            possible_ports.append(f"COM{i}")
            
        # Linux/macOS
        possible_ports.extend([
            "/dev/ttyACM0", "/dev/ttyACM1", 
            "/dev/ttyUSB0", "/dev/ttyUSB1",
            "/dev/cu.usbmodem*", "/dev/cu.usbserial*"
        ])
        
        for port in possible_ports:
            try:
                print(f"   Trying {port}...")
                test_conn = serial.Serial(port, 115200, timeout=2)
                time.sleep(1)
                
                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                test_conn.write(b"TEST\n")
                test_conn.flush()
                time.sleep(0.5)
                
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
                response = ""
                start_time = time.time()
                while time.time() - start_time < 2:
                    if test_conn.in_waiting > 0:
                        response += test_conn.read(test_conn.in_waiting).decode('utf-8', errors='ignore')
                        if any(keyword in response.lower() for keyword in ['fish', 'feeder', 'arduino', 'relay', 'sensor']):
                            print(f"‚úÖ Arduino found at {port}")
                            test_conn.close()
                            return port
                            
                test_conn.close()
                
            except Exception as e:
                continue
                
        print("‚ùå Arduino not found!")
        return None
    
    def connect(self, port=None):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino"""
        if port is None:
            port = self.find_arduino()
            
        if port is None:
            return False
            
        try:
            self.serial_conn = serial.Serial(port, 115200, timeout=2)
            time.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Arduino boot
            self.connected = True
            print(f"‚úÖ Connected to Arduino at {port}")
            return True
            
        except Exception as e:
            print(f"‚ùå Connection failed: {e}")
            return False
    
    def send_command(self, command):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ Arduino"""
        if not self.connected or not self.serial_conn:
            print("‚ùå Not connected to Arduino")
            return None
            
        try:
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            cmd_bytes = f"{command}\n".encode()
            self.serial_conn.write(cmd_bytes)
            self.serial_conn.flush()
            print(f"üì§ Sent: {command}")
            
            # ‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
            time.sleep(0.5)
            response = ""
            start_time = time.time()
            
            while time.time() - start_time < 3:
                if self.serial_conn.in_waiting > 0:
                    new_data = self.serial_conn.read(self.serial_conn.in_waiting).decode('utf-8', errors='ignore')
                    response += new_data
                    
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô newline ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ response ‡πÅ‡∏•‡πâ‡∏ß
                    if '\n' in new_data:
                        break
                        
                time.sleep(0.1)
            
            if response.strip():
                print(f"üì• Response: {response.strip()}")
                return response.strip()
            else:
                print("‚ö†Ô∏è No response from Arduino")
                return None
                
        except Exception as e:
            print(f"‚ùå Command failed: {e}")
            return None
    
    def test_relay_commands(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á RELAY ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("\n" + "="*50)
        print("üîß RELAY COMMAND DIAGNOSTIC TEST")
        print("="*50)
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_commands = [
            ("R:0", "All OFF - ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á"),
            ("R:1", "LED ON/Toggle - ‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü"),
            ("R:2", "FAN ON/Toggle - ‡∏û‡∏±‡∏î‡∏•‡∏°"),
            ("R:3", "LED OFF (if supported)"),
            ("R:4", "FAN OFF (if supported)"),
            ("R:5", "LED ON (explicit)"),
            ("R:6", "FAN ON (explicit)"),
        ]
        
        for command, description in test_commands:
            print(f"\nüß™ Testing: {command} - {description}")
            response = self.send_command(command)
            
            if response:
                if "ACK" in response or "RELAY" in response:
                    print("‚úÖ Command executed successfully")
                elif "NAK" in response or "ERROR" in response:
                    print("‚ùå Command failed or invalid")
                else:
                    print("‚ö†Ô∏è Unexpected response")
            else:
                print("‚ùå No response - possible communication issue")
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            time.sleep(2)
    
    def test_hardware_pins(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö hardware pins ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
        print("\n" + "="*50)
        print("üîå HARDWARE PIN TEST")
        print("="*50)
        
        print("üìã Expected pin configuration:")
        print("   RELAY_LED = Pin 50 (Active LOW)")
        print("   RELAY_FAN = Pin 52 (Active LOW)")
        print("   Active LOW means: LOW = ON, HIGH = OFF")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ pin
        pin_tests = [
            "pinMode(50, OUTPUT);digitalWrite(50, LOW);",   # LED ON
            "pinMode(52, OUTPUT);digitalWrite(52, LOW);",   # FAN ON
            "digitalWrite(50, HIGH);",                      # LED OFF
            "digitalWrite(52, HIGH);",                      # FAN OFF
        ]
        
        print("\nüí° If RELAY doesn't work, check:")
        print("1. Hardware connections (relay board to pins 50, 52)")
        print("2. Power supply to relay board")
        print("3. Relay type (Active HIGH vs Active LOW)")
        print("4. Voltage levels (3.3V vs 5V logic)")
    
    def interactive_test(self):
        """‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö interactive"""
        print("\n" + "="*50)
        print("üéÆ INTERACTIVE RELAY TEST")
        print("="*50)
        print("Commands:")
        print("  R:0 - All OFF")
        print("  R:1 - LED Toggle")
        print("  R:2 - FAN Toggle") 
        print("  R:3 - LED OFF")
        print("  R:4 - FAN OFF")
        print("  R:5 - LED ON")
        print("  R:6 - FAN ON")
        print("  quit - Exit")
        print("-" * 50)
        
        while True:
            try:
                command = input("\nEnter command: ").strip()
                
                if command.lower() in ['quit', 'exit', 'q']:
                    break
                    
                if command:
                    self.send_command(command)
                    
            except KeyboardInterrupt:
                print("\nüëã Exiting...")
                break
    
    def run_full_diagnostic(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üîß FISH FEEDER RELAY DIAGNOSTIC TOOL")
        print("="*50)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino
        if not self.connect():
            print("‚ùå Cannot connect to Arduino. Please check:")
            print("1. Arduino is connected via USB")
            print("2. Correct COM port")
            print("3. Arduino firmware is uploaded")
            print("4. USB cable is working (not power-only)")
            return
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Arduino ‡∏û‡∏£‡πâ‡∏≠‡∏°
        time.sleep(2)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö basic communication
        print("\nüì° Testing basic communication...")
        response = self.send_command("TEST")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á RELAY
        self.test_relay_commands()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hardware
        self.test_hardware_pins()
        
        # ‡πÇ‡∏´‡∏°‡∏î interactive
        choice = input("\nüéÆ Start interactive testing? (y/N): ").lower()
        if choice in ['y', 'yes']:
            self.interactive_test()
        
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        if self.serial_conn:
            self.serial_conn.close()
            print("\n‚úÖ Disconnected from Arduino")

def main():
    """Main function"""
    diagnostic = RelayDiagnostic()
    diagnostic.run_full_diagnostic()

if __name__ == "__main__":
    main() 