#!/usr/bin/env python3
"""
üîÑ ARDUINO RESET & RECONNECT TOOL
"""

import serial
import time
import sys

def reset_arduino_connection(port='COM3'):
    """Reset Arduino connection"""
    print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Reset Arduino connection ‡∏ó‡∏µ‡πà {port}...")
    
    try:
        # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÜ
        ser = serial.Serial(port, 115200, timeout=1)
        print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Serial connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # Reset DTR/RTS
        ser.setDTR(False)
        ser.setRTS(False)
        time.sleep(0.1)
        ser.setDTR(True)
        ser.setRTS(True)
        time.sleep(0.1)
        
        # Flush buffers
        ser.flushInput()
        ser.flushOutput()
        print("üßπ ‡∏•‡πâ‡∏≤‡∏á buffers ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        print("üì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£...")
        ser.write(b'PING\n')
        
        # ‡∏£‡∏≠ response
        for i in range(10):
            response = ser.readline().decode('utf-8', errors='ignore').strip()
            if response:
                print(f"üì• Response: {response}")
                if '[' in response:  # Arduino protocol
                    print("‚úÖ Arduino Fish Feeder ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á!")
                    ser.close()
                    return True
            time.sleep(0.1)
        
        ser.close()
        print("‚ö†Ô∏è Arduino ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Fish Feeder protocol")
        return False
        
    except PermissionError:
        print("‚ùå PermissionError: Arduino ‡∏ñ‡∏π‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà!")
        print("üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        print("   1. ‡∏õ‡∏¥‡∏î Arduino IDE")
        print("   2. ‡∏õ‡∏¥‡∏î Serial Monitor")
        print("   3. ‡∏õ‡∏¥‡∏î PlatformIO")
        print("   4. ‡∏£‡∏±‡∏ô Python as Administrator")
        return False
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def advanced_reset():
    """Advanced Arduino reset with multiple attempts"""
    print("üöÄ ADVANCED ARDUINO RESET")
    print("=" * 40)
    
    # ‡∏•‡∏≠‡∏á reset ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    for attempt in range(3):
        print(f"\nüîÑ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1}/3")
        
        if reset_arduino_connection():
            print("üéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Arduino ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return True
        
        if attempt < 2:
            print("‚è≥ ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(2)
    
    print("üòû ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ reset Arduino ‡πÑ‡∏î‡πâ")
    return False

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "advanced":
        advanced_reset()
    else:
        reset_arduino_connection() 