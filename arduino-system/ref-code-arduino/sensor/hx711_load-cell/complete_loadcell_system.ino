#include <HX711.h>       // ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• HX711 (Load Cell Amplifier)
#include <EEPROM.h>      // ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ EEPROM

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á Load Cell
const int LOADCELL_DOUT_PIN = 28;
const int LOADCELL_SCK_PIN = 26;

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ EEPROM ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ scale ‡πÅ‡∏•‡∏∞ offset
const int EEPROM_SCALE_ADDR = 0;     // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö scaleFactor (float ‡πÉ‡∏ä‡πâ 4 ‡πÑ‡∏ö‡∏ï‡πå)
const int EEPROM_OFFSET_ADDR = EEPROM_SCALE_ADDR + sizeof(float);  // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å scale ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö offset

HX711 scale;             // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå scale ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö HX711
float scaleFactor = 1.0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏™‡πÄ‡∏Å‡∏• (‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å)
long offset = 0;         // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ offset (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå)

String inputString = "";     // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å Serial
bool inputComplete = false;  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Serial ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß

void setup() {
  Serial.begin(115200);    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô serial ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ô‡∏∏‡∏Å‡∏£‡∏°
  Serial.println("üì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Fish Feeder...");

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å EEPROM ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  EEPROM.get(EEPROM_SCALE_ADDR, scaleFactor); // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ scaleFactor
  EEPROM.get(EEPROM_OFFSET_ADDR, offset);     // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ offset

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  Serial.print("üì• scaleFactor: ");
  Serial.println(scaleFactor, 6); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 6 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  Serial.print("üì• offset: ");
  Serial.println(offset);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ scaleFactor ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
  if (scaleFactor < 1.0 || scaleFactor > 100000.0) {
    Serial.println("‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤ scaleFactor ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ calibrate ‡πÉ‡∏´‡∏°‡πà");
    scaleFactor = 1.0; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Load Cell ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(scaleFactor);  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ scaleFactor ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
  scale.set_offset(offset);      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ offset ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
  
  Serial.println("üìå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å...");
  Serial.println("üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á (kg) ‡πÄ‡∏ä‡πà‡∏ô 2.0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠ calibrate ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå 'reset' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á EEPROM");
  Serial.println("üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå 'tare' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà");
}

void loop() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Serial
  if (inputComplete) {
    processSerialInput();
    inputComplete = false;
    inputString = "";
  }
  
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ (‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  static unsigned long lastReading = 0;
  if (millis() - lastReading >= 3000) {
    displayWeight();
    lastReading = millis();
  }
}

void processSerialInput() {
  inputString.trim(); // ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏≠‡∏≠‡∏Å
  
  if (inputString.equalsIgnoreCase("reset")) {
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ EEPROM
    float zeroF = 0.0;
    long zeroL = 0;
    EEPROM.put(EEPROM_SCALE_ADDR, zeroF);
    EEPROM.put(EEPROM_OFFSET_ADDR, zeroL);
    scaleFactor = 1.0;
    offset = 0;
    scale.set_scale(scaleFactor);
    scale.set_offset(offset);
    Serial.println("üßπ ‡∏•‡πâ‡∏≤‡∏á EEPROM ‡πÅ‡∏•‡πâ‡∏ß (scaleFactor = 1.0, offset = 0)");
    
  } else if (inputString.equalsIgnoreCase("tare")) {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà
    scale.tare();
    offset = scale.get_offset();
    EEPROM.put(EEPROM_OFFSET_ADDR, offset);
    Serial.println("‚öñÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß");
    
  } else {
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö calibration
    float knownWeight = inputString.toFloat();
    if (knownWeight > 0) {
      calibrateScale(knownWeight);
    } else {
      Serial.println("‚ùå ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 2.0) ‡∏´‡∏£‡∏∑‡∏≠ 'reset' ‡∏´‡∏£‡∏∑‡∏≠ 'tare'");
    }
  }
}

void calibrateScale(float knownWeight) {
  Serial.println("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏° calibration...");
  Serial.print("üìè ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ");
  Serial.print(knownWeight, 3);
  Serial.println(" kg");
  
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
  float rawReading = scale.get_value(10);
  
  if (rawReading != 0) {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì scale factor
    scaleFactor = rawReading / knownWeight;
    offset = scale.get_offset();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á EEPROM
    EEPROM.put(EEPROM_SCALE_ADDR, scaleFactor);
    EEPROM.put(EEPROM_OFFSET_ADDR, offset);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    scale.set_scale(scaleFactor);
    
    Serial.println("‚úÖ Calibration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:");
    Serial.print("   ‚Ü™ ‡∏Ñ‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏î‡∏¥‡∏ö: "); Serial.println(rawReading, 3);
    Serial.print("   ‚Ü™ scaleFactor: "); Serial.println(scaleFactor, 6);
    Serial.print("   ‚Ü™ offset: "); Serial.println(offset);
    Serial.println("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á EEPROM ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    Serial.print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ");
    Serial.print(scale.get_units(5), 3);
    Serial.println(" kg");
    
  } else {
    Serial.println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Load Cell ‡πÑ‡∏î‡πâ");
  }
}

void displayWeight() {
  float weight = scale.get_units(10); // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å 10 ‡∏Ñ‡πà‡∏≤
  Serial.print("‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ");
  Serial.print(weight, 3);     // ‡πÅ‡∏™‡∏î‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 3 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
  Serial.println(" kg");
}

void serialEvent() {
  while (Serial.available()) {
    char inChar = (char)Serial.read();
    if (inChar == '\n' || inChar == '\r') {
      inputComplete = true;
    } else {
      inputString += inChar;
    }
  }
}

// === INTEGRATION NOTES FOR FISH FEEDER IOT SYSTEM ===
//
// üéØ JSON OUTPUT FORMAT (REAL DATA ONLY - NO MOCKUP):
// {
//   "weight": weight,              // float - ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (kg)
//   "weight_raw": scale.read(),    // long - ‡∏Ñ‡πà‡∏≤ ADC ‡∏î‡∏¥‡∏ö
//   "scale_factor": scaleFactor,   // float - ‡∏Ñ‡πà‡∏≤‡∏™‡πÄ‡∏Å‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
//   "offset": offset,              // long - ‡∏Ñ‡πà‡∏≤ offset (tare)
//   "is_stable": true,             // bool - ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (variance < 0.01kg)
//   "timestamp": millis()          // unsigned long - ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤
// }
//
// ‚öñÔ∏è FISH FEEDER WEIGHT MONITORING:
// - ‡∏ß‡∏±‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏•‡∏≤‡πÉ‡∏ô‡∏ñ‡∏±‡∏á
// - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
// - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ
// - Alert ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏°‡∏î (< 0.5kg)
//
// üîß CALIBRATION & EEPROM:
// - scaleFactor ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô EEPROM address 0-3
// - offset ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô EEPROM address 4-7
// - Auto-load ‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ restart
// - Validation: scaleFactor ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1.0-100000.0
//
// üåê WEB DASHBOARD INTEGRATION:
// - ‡πÅ‡∏™‡∏î‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ö‡∏ö Real-time gauge
// - ‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£
// - Alert ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πà‡∏≥
// - ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ß‡∏±‡∏ô)
//
// üîÑ PI SERVER INTEGRATION:
// - ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Serial (115200 baud)
// - ‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase: /fish-feeder-system/weight/
// - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å delay 1000ms)
// - Log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö feeding history
//
// üìä PERFORMANCE OPTIMIZATION:
// - ‡πÉ‡∏ä‡πâ get_units(10) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
// - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ (variance)
// - ‡∏Å‡∏£‡∏≠‡∏á noise ‡πÅ‡∏•‡∏∞ drift
// - Temperature compensation
//
// ‚ö†Ô∏è IMPORTANT - NO MOCKUP DATA:
// - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å HX711
// - ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
// - Error handling: ‡∏ñ‡πâ‡∏≤ HX711 ‡πÄ‡∏™‡∏µ‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ null
// - Regular calibration ‡∏ó‡∏∏‡∏Å 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
//
// üöÄ ARDUINO JSON COMMUNICATION WITH RASPBERRY PI 4:
// - #include <ArduinoJson.h> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON processing (‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°)
// - Pi ‚Üí Arduino: {"command": "read_weight"} ‡∏´‡∏£‡∏∑‡∏≠ {"command": "calibrate", "weight": 2.0} ‡∏´‡∏£‡∏∑‡∏≠ {"command": "tare"}
// - Arduino ‚Üí Pi: {"weight": 1.45, "calibration_status": "ok", "scale_factor": 17.5, "needs_calibration": false, "timestamp": 12345}
// - Pi Serial Commands: 115200 baud, newline terminated
// - Bi-directional communication ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö complete load cell management ‡πÅ‡∏•‡∏∞ automated feeding control
//
// üöÄ ADVANCED INTEGRATION - ArduinoJson (Future Use):
// 
// ‚ö° SERIAL JSON COMMANDS (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Web Control):
// - {"command": "calibrate", "weight": 2.0}    // Calibrate ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ
// - {"command": "tare"}                        // ‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå
// - {"command": "get_weight"}                  // ‡∏≠‡πà‡∏≤‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ  
// - {"command": "get_raw"}                     // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ raw (debug)
// - {"command": "reset_calibration"}           // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£ calibrate
//
// üì° JSON RESPONSE FORMAT:
// {
//   "type": "weight_data",
//   "weight": 1.234,
//   "is_stable": true,
//   "food_remaining_days": 5,
//   "alert_low_food": false,
//   "timestamp": 12345678
// }
//
// üåê WEB CALIBRATION WORKFLOW:
// 1. ‡πÄ‡∏ß‡πá‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‚Üí Firebase ‚Üí Pi Server ‚Üí Arduino
// 2. ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 2.0 kg ‡∏ö‡∏ô‡∏ï‡∏≤‡∏ä‡∏±‡πà‡∏á
// 3. Arduino ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì scaleFactor = (raw - offset) / 2.0
// 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á EEPROM ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// 5. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö
//
// üìö REQUIRED LIBRARIES (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON):
// - HX711.h (Load Cell)
// - EEPROM.h (Data Storage)  
// - ArduinoJson.h (JSON Processing) ‚Üê ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
//
// üîß PI SERVER SERIAL COMMUNICATION:
// ```python
// import serial, json
// ser = serial.Serial('/dev/ttyACM0', 115200)
// 
// def send_calibration(weight):
//     cmd = {"command": "calibrate", "weight": float(weight)}
//     ser.write((json.dumps(cmd) + '\n').encode())
// ```
//
// ‚ö†Ô∏è CRITICAL RULES:
// ‚ùå ‡∏´‡πâ‡∏≤‡∏°: delay(), mock data, blocking loops
// ‚úÖ ‡πÉ‡∏ä‡πâ: event-driven, JSON only, Firebase paths
// ‚úÖ Serial: 115200 baud ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// ‚úÖ Data: Real sensor data ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// ‚úÖ NON-BLOCKING: ‡πÉ‡∏ä‡πâ millis() ‡πÅ‡∏ó‡∏ô delay()
// ‚úÖ ERROR HANDLING: timeout protection 