// === actuator_control.ino ===
// ü¶æ ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Linear Actuator ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á ‡∏î‡πâ‡∏ß‡∏¢ PWM + ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (H-Bridge)

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Linear Actuator
#define ACT_ENA 11  // ‡∏Ç‡∏≤ PWM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
#define ACT_IN1 12  // ‡∏Ç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏î‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
#define ACT_IN2 13  // ‡∏Ç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô actuator
bool actuatorUsedLoad = false;
bool freezeBattery = false;
unsigned long actuatorStopTime = 0;

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Actuator ‡∏à‡∏≤‡∏Å Serial Command ===
void handleActuatorCommand(char cmd) {
  if (cmd == '1') {
    digitalWrite(ACT_IN1, HIGH);
    digitalWrite(ACT_IN2, LOW);
    analogWrite(ACT_ENA, 255);  // ‡∏î‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    actuatorUsedLoad = true;
    freezeBattery = true;
    actuatorStopTime = millis();
    Serial.println("Actuator ‡∏î‡∏±‡∏ô‡∏≠‡∏≠‡∏Å");
  } 
  else if (cmd == '2') {
    digitalWrite(ACT_IN1, LOW);
    digitalWrite(ACT_IN2, HIGH);
    analogWrite(ACT_ENA, 255);  // ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö
    actuatorUsedLoad = true;
    freezeBattery = true;
    actuatorStopTime = millis();
    Serial.println("Actuator ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö");
  } 
  else if (cmd == '0') {
    analogWrite(ACT_ENA, 0);  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ PWM
    actuatorUsedLoad = false;
    freezeBattery = false;
    actuatorStopTime = millis();
    Serial.println("Actuator ‡∏´‡∏¢‡∏∏‡∏î");
  }
}

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PIN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö actuator ===
void initActuatorControl() {
  pinMode(ACT_ENA, OUTPUT);
  pinMode(ACT_IN1, OUTPUT);
  pinMode(ACT_IN2, OUTPUT);
  analogWrite(ACT_ENA, 0);  // ‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
}

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup() ‡πÅ‡∏•‡∏∞ loop() ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ===
void setup() {
  Serial.begin(115200);
  initActuatorControl();
  Serial.println("Actuator control system ready.");
  Serial.println("Serial control commands:");
  Serial.println("  Press 1 = Extend actuator");
  Serial.println("  Press 2 = Retract actuator");
  Serial.println("  Press 0 = Stop actuator");
}

void loop() {
  if (Serial.available()) {
    char cmd = Serial.read();
    handleActuatorCommand(cmd);
  }
}

/*
üì° ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Web App:
- Web App ‡∏™‡πà‡∏á Serial Command ‡πÄ‡∏ä‡πà‡∏ô "A:1\n", "A:2\n", ‡∏´‡∏£‡∏∑‡∏≠ "A:0\n"
- Arduino ‡∏ù‡∏±‡πà‡∏á‡∏£‡∏±‡∏ö:
    if (input.startsWith("A:")) {
        char ch = input.charAt(2);
        handleActuatorCommand(ch);
    }
*/

// === INTEGRATION NOTES FOR FISH FEEDER IOT SYSTEM ===
//
// üéØ JSON OUTPUT FORMAT (REAL DATA ONLY - NO MOCKUP):
// {
//   "actuator_status": getActuatorState(),       // String - "extend", "retract", "stop"
//   "actuator_used_load": actuatorUsedLoad,     // bool - ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏•‡∏î
//   "actuator_pwm": analogRead(ACT_ENA),        // int - ‡∏Ñ‡πà‡∏≤ PWM ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
//   "freeze_battery": freezeBattery,            // bool - ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
//   "actuator_stop_time": actuatorStopTime,     // unsigned long - ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
//   "timestamp": millis()                       // unsigned long - ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤
// }
//
// ü¶æ LINEAR ACTUATOR CONTROL:
// - H-Bridge motor control (IN1/IN2/ENA)
// - Bidirectional movement (extend/retract)
// - PWM speed control (0-255)
// - Position feedback integration
//
// üì° SERIAL COMMANDS (FROM PI SERVER):
// - "A:1" = ‡∏î‡∏±‡∏ô actuator ‡∏≠‡∏≠‡∏Å (extend)
// - "A:2" = ‡∏î‡∏∂‡∏á actuator ‡∏Å‡∏•‡∏±‡∏ö (retract)
// - "A:0" = ‡∏´‡∏¢‡∏∏‡∏î actuator
// - Response: JSON status ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Pi
//
// üåê WEB DASHBOARD INTEGRATION:
// - ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏±‡∏ô/‡∏î‡∏∂‡∏á actuator
// - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
// - Position indicator (0-100%)
// - Manual control mode
//
// üîÑ PI SERVER INTEGRATION:
// - ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Serial (115200 baud)
// - ‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase: /fish-feeder-system/controls/actuator/
// - Position tracking ‡πÅ‡∏•‡∏∞ limits
// - Auto timeout safety (5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
//
// üéõÔ∏è FISH FEEDER APPLICATIONS:
// - ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ù‡∏≤‡∏ñ‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
// - ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ô‡πâ‡∏≥
// - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ö‡∏Å‡∏ß‡∏ô
// - Mechanical positioning system
//
// üîí SAFETY FEATURES:
// - Auto stop ‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î)
// - Limit switch integration
// - Overcurrent protection
// - Position feedback monitoring
//
// ‚ö†Ô∏è IMPORTANT - NO MOCKUP DATA:
// - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å H-Bridge
// - ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
// - Error handling: ‡∏ñ‡πâ‡∏≤ actuator ‡πÄ‡∏™‡∏µ‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ error
// - Safety: ‡∏°‡∏µ limit switches ‡πÅ‡∏•‡∏∞ timeout protection
//
// üöÄ ARDUINO JSON COMMUNICATION WITH RASPBERRY PI 4:
// - #include <ArduinoJson.h> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON processing
// - Pi ‚Üí Arduino: {"command": "move_actuator", "position": 50} ‡∏´‡∏£‡∏∑‡∏≠ {"command": "stop_actuator"}
// - Arduino ‚Üí Pi: {"actuator_status": "moving", "current_position": 45, "target_position": 50, "timestamp": 12345}
// - Pi Serial Commands: 115200 baud, newline terminated
// - Bi-directional communication ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö precise positioning ‡πÅ‡∏•‡∏∞ automated feeding gate control