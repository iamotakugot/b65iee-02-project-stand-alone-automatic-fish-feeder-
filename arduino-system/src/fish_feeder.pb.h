/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.91 */

#ifndef PB_FISH_FEEDER_PB_H_INCLUDED
#define PB_FISH_FEEDER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */

/* Struct definitions */
typedef struct _SensorData {
    float feed_temperature;
    float feed_humidity;
    float box_temperature;
    float box_humidity;
    float weight;
    float soil_moisture;
    float solar_voltage;
    float load_voltage;
    pb_callback_t battery_percent;
    uint32_t timestamp;
    pb_callback_t status;
} SensorData;

typedef struct _ControlCommand {
    pb_callback_t command;
    pb_callback_t device;
    pb_callback_t action;
    int32_t value;
    uint32_t timestamp;
    pb_callback_t source;
} ControlCommand;

typedef struct _SystemStatus {
    bool online;
    uint32_t uptime;
    uint32_t free_memory;
    pb_callback_t errors;
    pb_callback_t version;
    uint32_t last_command_time;
} SystemStatus;

typedef struct _DeviceStatus {
    bool led;
    bool fan;
    int32_t auger_speed;
    int32_t blower_speed;
    int32_t actuator_position;
    bool emergency_stop;
    uint32_t timestamp;
} DeviceStatus;

typedef struct _CalibrationCommand {
    pb_callback_t device;
    pb_callback_t action;
    float known_weight;
    int32_t raw_value;
    uint32_t timestamp;
} CalibrationCommand;

typedef struct _CalibrationResponse {
    pb_callback_t device;
    bool success;
    float scale_factor;
    int32_t offset;
    pb_callback_t message;
    uint32_t timestamp;
} CalibrationResponse;

typedef struct _EmergencyCommand {
    pb_callback_t action;
    pb_callback_t reason;
    uint32_t timestamp;
    pb_callback_t source;
} EmergencyCommand;

typedef struct _HeartbeatMessage {
    pb_callback_t device_id;
    uint32_t timestamp;
    bool alive;
    uint32_t sequence;
} HeartbeatMessage;

typedef struct _FishFeederMessage {
    pb_size_t which_message_type;
    union {
        SensorData sensor_data;
        ControlCommand control_command;
        SystemStatus system_status;
        DeviceStatus device_status;
        CalibrationCommand calibration_command;
        CalibrationResponse calibration_response;
        EmergencyCommand emergency_command;
        HeartbeatMessage heartbeat;
    } message_type;
    uint32_t message_id;
    uint32_t timestamp;
    pb_callback_t source;
} FishFeederMessage;

/* Initializer values for message structs */
#define SensorData_init_default                  {0, 0, 0, 0, 0, 0, 0, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define ControlCommand_init_default              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, {{NULL}, NULL}}
#define SystemStatus_init_default                {0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define DeviceStatus_init_default                {0, 0, 0, 0, 0, 0, 0}
#define CalibrationCommand_init_default          {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0}
#define CalibrationResponse_init_default         {{{NULL}, NULL}, 0, 0, 0, {{NULL}, NULL}, 0}
#define EmergencyCommand_init_default            {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define HeartbeatMessage_init_default            {{{NULL}, NULL}, 0, 0, 0}
#define FishFeederMessage_init_default           {0, {SensorData_init_default}, 0, 0, {{NULL}, NULL}}

#define SensorData_init_zero                     {0, 0, 0, 0, 0, 0, 0, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define ControlCommand_init_zero                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, {{NULL}, NULL}}
#define SystemStatus_init_zero                   {0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define DeviceStatus_init_zero                   {0, 0, 0, 0, 0, 0, 0}
#define CalibrationCommand_init_zero             {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0}
#define CalibrationResponse_init_zero            {{{NULL}, NULL}, 0, 0, 0, {{NULL}, NULL}, 0}
#define EmergencyCommand_init_zero               {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define HeartbeatMessage_init_zero               {{{NULL}, NULL}, 0, 0, 0}
#define FishFeederMessage_init_zero              {0, {SensorData_init_zero}, 0, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define SensorData_feed_temperature_tag          1
#define SensorData_feed_humidity_tag             2
#define SensorData_box_temperature_tag           3
#define SensorData_box_humidity_tag              4
#define SensorData_weight_tag                    5
#define SensorData_soil_moisture_tag             6
#define SensorData_solar_voltage_tag             7
#define SensorData_load_voltage_tag              8
#define SensorData_battery_percent_tag           9
#define SensorData_timestamp_tag                 10
#define SensorData_status_tag                    11
#define ControlCommand_command_tag               1
#define ControlCommand_device_tag                2
#define ControlCommand_action_tag                3
#define ControlCommand_value_tag                 4
#define ControlCommand_timestamp_tag             5
#define ControlCommand_source_tag                6
#define SystemStatus_online_tag                  1
#define SystemStatus_uptime_tag                  2
#define SystemStatus_free_memory_tag             3
#define SystemStatus_errors_tag                  4
#define SystemStatus_version_tag                 5
#define SystemStatus_last_command_time_tag       6
#define DeviceStatus_led_tag                     1
#define DeviceStatus_fan_tag                     2
#define DeviceStatus_auger_speed_tag             3
#define DeviceStatus_blower_speed_tag            4
#define DeviceStatus_actuator_position_tag       5
#define DeviceStatus_emergency_stop_tag          6
#define DeviceStatus_timestamp_tag               7
#define CalibrationCommand_device_tag            1
#define CalibrationCommand_action_tag            2
#define CalibrationCommand_known_weight_tag      3
#define CalibrationCommand_raw_value_tag         4
#define CalibrationCommand_timestamp_tag         5
#define CalibrationResponse_device_tag           1
#define CalibrationResponse_success_tag          2
#define CalibrationResponse_scale_factor_tag     3
#define CalibrationResponse_offset_tag           4
#define CalibrationResponse_message_tag          5
#define CalibrationResponse_timestamp_tag        6
#define EmergencyCommand_action_tag              1
#define EmergencyCommand_reason_tag              2
#define EmergencyCommand_timestamp_tag           3
#define EmergencyCommand_source_tag              4
#define HeartbeatMessage_device_id_tag           1
#define HeartbeatMessage_timestamp_tag           2
#define HeartbeatMessage_alive_tag               3
#define HeartbeatMessage_sequence_tag            4
#define FishFeederMessage_sensor_data_tag        1
#define FishFeederMessage_control_command_tag    2
#define FishFeederMessage_system_status_tag      3
#define FishFeederMessage_device_status_tag      4
#define FishFeederMessage_calibration_command_tag 5
#define FishFeederMessage_calibration_response_tag 6
#define FishFeederMessage_emergency_command_tag  7
#define FishFeederMessage_heartbeat_tag          8
#define FishFeederMessage_message_id_tag         9
#define FishFeederMessage_timestamp_tag          10
#define FishFeederMessage_source_tag             11

/* Struct field encoding specification for nanopb */
#define SensorData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    feed_temperature,   1) \
X(a, STATIC,   SINGULAR, FLOAT,    feed_humidity,      2) \
X(a, STATIC,   SINGULAR, FLOAT,    box_temperature,    3) \
X(a, STATIC,   SINGULAR, FLOAT,    box_humidity,       4) \
X(a, STATIC,   SINGULAR, FLOAT,    weight,             5) \
X(a, STATIC,   SINGULAR, FLOAT,    soil_moisture,      6) \
X(a, STATIC,   SINGULAR, FLOAT,    solar_voltage,      7) \
X(a, STATIC,   SINGULAR, FLOAT,    load_voltage,       8) \
X(a, CALLBACK, SINGULAR, STRING,   battery_percent,    9) \
X(a, STATIC,   SINGULAR, UINT32,   timestamp,         10) \
X(a, CALLBACK, SINGULAR, STRING,   status,            11)
#define SensorData_CALLBACK pb_default_field_callback
#define SensorData_DEFAULT NULL

#define ControlCommand_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   command,            1) \
X(a, CALLBACK, SINGULAR, STRING,   device,             2) \
X(a, CALLBACK, SINGULAR, STRING,   action,             3) \
X(a, STATIC,   SINGULAR, INT32,    value,              4) \
X(a, STATIC,   SINGULAR, UINT32,   timestamp,          5) \
X(a, CALLBACK, SINGULAR, STRING,   source,             6)
#define ControlCommand_CALLBACK pb_default_field_callback
#define ControlCommand_DEFAULT NULL

extern const pb_msgdesc_t SensorData_msg;
extern const pb_msgdesc_t ControlCommand_msg;
extern const pb_msgdesc_t SystemStatus_msg;
extern const pb_msgdesc_t DeviceStatus_msg;
extern const pb_msgdesc_t CalibrationCommand_msg;
extern const pb_msgdesc_t CalibrationResponse_msg;
extern const pb_msgdesc_t EmergencyCommand_msg;
extern const pb_msgdesc_t HeartbeatMessage_msg;
extern const pb_msgdesc_t FishFeederMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SensorData_fields &SensorData_msg
#define ControlCommand_fields &ControlCommand_msg
#define SystemStatus_fields &SystemStatus_msg
#define DeviceStatus_fields &DeviceStatus_msg
#define CalibrationCommand_fields &CalibrationCommand_msg
#define CalibrationResponse_fields &CalibrationResponse_msg
#define EmergencyCommand_fields &EmergencyCommand_msg
#define HeartbeatMessage_fields &HeartbeatMessage_msg
#define FishFeederMessage_fields &FishFeederMessage_msg

/* Maximum encoded size of messages (where known) */
/* SensorData_size depends on runtime parameters */
/* ControlCommand_size depends on runtime parameters */
/* SystemStatus_size depends on runtime parameters */
#define DeviceStatus_size                        32
/* CalibrationCommand_size depends on runtime parameters */
/* CalibrationResponse_size depends on runtime parameters */
/* EmergencyCommand_size depends on runtime parameters */
/* HeartbeatMessage_size depends on runtime parameters */
/* FishFeederMessage_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif 