// === blower_control.ino ===
// üåÄ ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏û‡∏±‡∏î‡∏•‡∏° (Blower) ‡∏î‡πâ‡∏ß‡∏¢ PWM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡∏±‡∏î‡∏•‡∏°‡∏ú‡πà‡∏≤‡∏ô H-Bridge
#define RPWM 5    // PWM ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
#define LPWM 6    // ‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á H-Bridge (‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏±‡πà‡∏á LOW)

int speedLevel = 250;            // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏±‡∏î‡∏•‡∏° (0-255) ‚ö†Ô∏è PWM ‡∏ï‡πâ‡∏≠‡∏á ‚â• 230 ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏î‡πâ
bool isRunning = false;          // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏±‡∏î‡∏•‡∏°
bool freezeBattery = false;      // ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
unsigned long blowerStopTime = 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

// ‚ö†Ô∏è MOTOR SPECIFICATIONS:
// - Minimum PWM: 230 (PWM < 230 = motor ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô)
// - Operating Range: 230-255 (25 levels)
// - Recommended Default: 250 (high efficiency)

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏û‡∏±‡∏î‡∏•‡∏°‡∏à‡∏≤‡∏Å Serial Command ===
void handleBlowerCommand(char cmd) {
  if (cmd == '1') {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PWM ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    if (speedLevel < 230) {
      speedLevel = 230; // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
      Serial.println("‚ö†Ô∏è ‡∏õ‡∏£‡∏±‡∏ö PWM ‡πÄ‡∏õ‡πá‡∏ô 230 (‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏î‡πâ)");
    }
    
    analogWrite(RPWM, speedLevel);   // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    digitalWrite(LPWM, LOW);         // ‡∏õ‡∏¥‡∏î‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
    isRunning = true;
    freezeBattery = true;
    blowerStopTime = millis();
    Serial.print("‡∏û‡∏±‡∏î‡∏•‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß PWM ");
    Serial.println(speedLevel);
  } 
  else if (cmd == '2') {
    analogWrite(RPWM, 0);            // ‡∏´‡∏¢‡∏∏‡∏î PWM
    isRunning = false;
    freezeBattery = false;
    blowerStopTime = millis();
    Serial.println("‡∏û‡∏±‡∏î‡∏•‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
  }
}

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤‡∏û‡∏±‡∏î‡∏•‡∏° ===
void initBlowerControl() {
  pinMode(RPWM, OUTPUT);
  pinMode(LPWM, OUTPUT);
  analogWrite(RPWM, 0);
  digitalWrite(LPWM, LOW);
}

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup() ‡πÅ‡∏•‡∏∞ loop() ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ===
void setup() {
  Serial.begin(115200);
  initBlowerControl();
  Serial.println("Blower control system ready.");
  Serial.println("‚ö†Ô∏è PWM Range: 230-255 (PWM < 230 = motor ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô)");
  Serial.println("Serial control commands:");
  Serial.println("  Press 1 = Turn ON fan (PWM 250)");
  Serial.println("  Press 2 = Turn OFF fan");
}

void loop() {
  if (Serial.available()) {
    char cmd = Serial.read();
    handleBlowerCommand(cmd);
  }
}

/*
üì° ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Web App:
- Web App ‡∏™‡πà‡∏á Serial Command ‡πÄ‡∏ä‡πà‡∏ô "B:1\n", "B:2\n"
- Arduino ‡∏ù‡∏±‡πà‡∏á‡∏£‡∏±‡∏ö:
    if (input.startsWith("B:")) {
        char ch = input.charAt(2);
        handleBlowerCommand(ch);
    }
*/

// === INTEGRATION NOTES FOR FISH FEEDER IOT SYSTEM ===
//
// üéØ JSON OUTPUT FORMAT (REAL DATA ONLY - NO MOCKUP):
// {
//   "blower_status": isRunning,              // bool - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏±‡∏î‡∏•‡∏°
//   "blower_speed": speedLevel,              // int - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß PWM (0-255)
//   "blower_pwm_output": analogRead(RPWM),   // int - ‡∏Ñ‡πà‡∏≤ PWM ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
//   "freeze_battery": freezeBattery,         // bool - ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
//   "blower_stop_time": blowerStopTime,      // unsigned long - ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
//   "timestamp": millis()                    // unsigned long - ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤
// }
//
// üåÄ BLOWER VENTILATION SYSTEM:
// - PWM control ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏±‡∏î‡∏•‡∏° (0-255)
// - H-Bridge motor driver (RPWM/LPWM)
// - ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏π‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°/‡∏ñ‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
// - Auto speed adjustment ‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
// - ‚ö†Ô∏è CRITICAL: PWM ‡∏ï‡πâ‡∏≠‡∏á ‚â• 230 ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏î‡πâ (‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà PWM < 230)
//
// üì° SERIAL COMMANDS (FROM PI SERVER):
// - "B:1" = ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß default
// - "B:2" = ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°
// - "B:1:150" = ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß 150
// - Response: JSON status ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Pi
//
// üåê WEB DASHBOARD INTEGRATION:
// - ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°
// - Slider ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (0-255)
// - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
// - Auto mode ‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡∏π‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
//
// üîÑ PI SERVER INTEGRATION:
// - ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Serial (115200 baud)
// - ‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase: /fish-feeder-system/controls/blower/
// - Auto control ‡∏ï‡∏≤‡∏° control_temp
// - Energy management integration
//
// üéõÔ∏è AUTO CONTROL SCENARIOS:
// - Speed 0: temp < 35¬∞C (‡∏õ‡∏¥‡∏î)
// - Speed 230: 35¬∞C ‚â§ temp < 40¬∞C (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
// - Speed 240: 40¬∞C ‚â§ temp < 45¬∞C (‡∏Å‡∏•‡∏≤‡∏á)
// - Speed 255: temp ‚â• 45¬∞C (‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏õ‡∏µ‡∏î)
// - Emergency: Force OFF ‡πÄ‡∏°‡∏∑‡πà‡∏≠ battery < 15%
// - ‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ PWM 100-229 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô
//
// ‚ö†Ô∏è IMPORTANT - NO MOCKUP DATA:
// - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å PWM output
// - ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
// - Error handling: ‡∏ñ‡πâ‡∏≤ motor ‡πÄ‡∏™‡∏µ‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ error
// - Safety: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô overcurrent ‡∏î‡πâ‡∏ß‡∏¢ current monitoring
//
// üöÄ ARDUINO JSON COMMUNICATION WITH RASPBERRY PI 4:
// - #include <ArduinoJson.h> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON processing
// - Pi ‚Üí Arduino: {"command": "blower_on", "pwm_value": 240} ‡∏´‡∏£‡∏∑‡∏≠ {"command": "blower_off"}
// - Arduino ‚Üí Pi: {"blower_status": "on", "current_pwm": 240, "motor_running": true, "timestamp": 12345}
// - Pi Serial Commands: 115200 baud, newline terminated
// - Bi-directional communication ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ventilation control ‡πÅ‡∏•‡∏∞ temperature management
