// === ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà (‡πÉ‡∏ä‡πâ ACS712-30A) ===

// === Pin Mapping ===
const int solarVoltagePin = A3;  // ‡∏Ç‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå
const int solarCurrentPin = A4;  // ‡∏Ç‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå (‡∏ú‡πà‡∏≤‡∏ô ACS712)
const int loadVoltagePin  = A1;  // ‡∏Ç‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà)
const int loadCurrentPin  = A0;  // ‡∏Ç‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î (‡∏ú‡πà‡∏≤‡∏ô ACS712)

// === ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ===
const float vRef = 5.0;                 // ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á ADC
const float vFactor = 4.50;             // ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô (‡∏ï‡∏≤‡∏°‡∏ß‡∏á‡∏à‡∏£‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô)
const float sensitivity = 0.066;        // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡∏Ç‡∏≠‡∏á ACS712-30A (66 mV/A)
const float zeroCurrentVoltage = 2.500; // ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á (0A) ‡∏Ç‡∏≠‡∏á ACS712

int printCount = 1;                     // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
String lastBatteryPercent = "";         // ‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà

// === ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ (GLOBAL VARIABLES) ===
float currentSolarVoltage = 0.0;        // ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (V)
float currentSolarCurrent = 0.0;        // ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (A)
float currentLoadVoltage = 0.0;          // ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î/‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (V)
float currentLoadCurrent = 0.0;          // ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (A)
float currentBatteryPercent = 0.0;       // ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà (0-100)
bool isCurrentlyCharging = false;        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à (true/false)
float currentSolarPower = 0.0;           // ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå (W)
float currentLoadPower = 0.0;            // ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏•‡∏î (W)
String batteryStatusText = "";           // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô (Lithium-ion 12V 12AH) ===
float estimateBatteryPercentage(float voltage) {
  // ‚ö° LITHIUM-ION 12V 12AH BATTERY SPECIFICATIONS:
  // ‚Ä¢ ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: 8.4-12.6V
  // ‚Ä¢ ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à: 12.6V  
  // ‚Ä¢ ‡∏°‡∏µ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ö‡∏≤‡∏•‡∏≤‡∏ô‡∏ã‡πå‡πÉ‡∏ô‡∏ï‡∏±‡∏ß
  // ‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏: 12AH
  
  const float minV = 8.4;    // 0% - ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
  const float maxV = 12.6;   // 100% - ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÄ‡∏ï‡πá‡∏°
  
  if (voltage >= maxV) return 100.0;
  if (voltage <= minV) return 0.0;
  
  // ‚ö° LITHIUM-ION 12V 12AH DISCHARGE CURVE (‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ‡∏à‡∏£‡∏¥‡∏á):
  float percent = 0.0;
  
  if (voltage >= 12.4) {
    // 12.4-12.6V = 90-100% (‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏™‡∏∏‡∏î)
    percent = 90.0 + ((voltage - 12.4) / 0.2) * 10.0;
  } else if (voltage >= 12.0) {
    // 12.0-12.4V = 70-90% (‡∏ä‡πà‡∏ß‡∏á‡∏ö‡∏ô)
    percent = 70.0 + ((voltage - 12.0) / 0.4) * 20.0;
  } else if (voltage >= 11.5) {
    // 11.5-12.0V = 40-70% (‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á)
    percent = 40.0 + ((voltage - 11.5) / 0.5) * 30.0;
  } else if (voltage >= 10.5) {
    // 10.5-11.5V = 15-40% (‡∏ä‡πà‡∏ß‡∏á‡∏•‡πà‡∏≤‡∏á)
    percent = 15.0 + ((voltage - 10.5) / 1.0) * 25.0;
  } else if (voltage >= 9.0) {
    // 9.0-10.5V = 5-15% (‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πà‡∏≥)
    percent = 5.0 + ((voltage - 9.0) / 1.5) * 10.0;
  } else {
    // 8.4-9.0V = 0-5% (‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏¥‡∏Å‡∏§‡∏ï - ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î)
    percent = ((voltage - 8.4) / 0.6) * 5.0;
  }
  
  return constrain(percent, 0.0, 100.0);
}

// === ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô/‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ===
void readSensors(float& solarV, float& solarI, float& loadV, float& loadI) {
  const int sampleCount = 150;
  long sumVS = 0, sumIS = 0;
  long sumVL = 0, sumIL = 0;

  for (int i = 0; i < sampleCount; i++) {
    sumVS += analogRead(solarVoltagePin);
    sumIS += analogRead(solarCurrentPin);
    sumVL += analogRead(loadVoltagePin);
    sumIL += analogRead(loadCurrentPin);
  }

  solarV = (sumVS / (float)sampleCount / 1023.0) * vRef * vFactor;
  loadV  = (sumVL / (float)sampleCount / 1023.0) * vRef * vFactor;

  solarI = (((sumIS / (float)sampleCount) / 1023.0) * vRef - zeroCurrentVoltage) / sensitivity - 0.5;
  loadI  = (((sumIL / (float)sampleCount) / 1023.0) * vRef - zeroCurrentVoltage) / sensitivity;

  if (solarV < 1.0) solarV = 0.0;
  if (abs(solarI) < 0.50 || solarV < 1.0) solarI = 0.0;
  if (loadI < 0.0) loadI = -loadI;
}

// === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ===
bool isCharging(float solarV, float solarI) {
  // ‚ö° ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à (‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ):
  // - ‡πÅ‡∏™‡∏î‡∏á "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à..." ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Solar Voltage ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (> 5V)
  // - ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ä‡∏≤‡∏£‡πå‡∏à
  
  return (solarV > 5.0);  // ‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå = ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à
}

// === ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ ===
void printPowerReadings(float solarV, float solarI, float loadV, float loadI) {
  Serial.print(printCount++);
  Serial.print(" | Solar: "); Serial.print(solarV, 1); Serial.print(" V | "); Serial.print(solarI, 3); Serial.print(" A || ");
  Serial.print("Load: "); Serial.print(loadV, 1); Serial.print(" V | "); Serial.print(loadI, 3); Serial.print(" A | ");
}

// === ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global ===
void printBatteryStatus(float loadV, float solarV, float solarI) {
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à
  isCurrentlyCharging = isCharging(solarV, solarI);
  
  if (isCurrentlyCharging) {
    lastBatteryPercent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à...";
    batteryStatusText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à...";
    currentBatteryPercent = -1.0; // ‡πÉ‡∏ä‡πâ -1 ‡πÅ‡∏ó‡∏ô % ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à
  } else {
    float percent = estimateBatteryPercentage(loadV);
    lastBatteryPercent = String(percent, 1) + " %";
    batteryStatusText = String(percent, 1) + " %";
    currentBatteryPercent = percent;
  }
}

// === ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ===
void setup() {
  Serial.begin(115200);
}

// === ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏ô‡∏ã‡πâ‡∏≥ ===
void loop() {
  float solarV, solarI, loadV, loadI;
  readSensors(solarV, solarI, loadV, loadI);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
  currentSolarVoltage = solarV;
  currentSolarCurrent = solarI;
  currentLoadVoltage = loadV;
  currentLoadCurrent = loadI;
  currentSolarPower = solarV * solarI;      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå (W)
  currentLoadPower = loadV * loadI;         // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏•‡∏î (W)
  
  printPowerReadings(solarV, solarI, loadV, loadI);
  printBatteryStatus(loadV, solarV, solarI);

  Serial.print("Battery: ");
  Serial.println(lastBatteryPercent);
}

// === INTEGRATION NOTES FOR FISH FEEDER IOT SYSTEM ===
//
// üéØ JSON OUTPUT FORMAT (REAL DATA ONLY - NO MOCKUP):
// {
//   "solar_voltage": solarV,        // float - ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå (V)
//   "solar_current": solarI,        // float - ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå (A) 
//   "load_voltage": loadV,          // float - ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î/‡πÅ‡∏ö‡∏ï (V)
//   "load_current": loadI,          // float - ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏ù‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î (A)
//   "battery_status": lastBatteryPercent, // String - "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à..." ‡∏´‡∏£‡∏∑‡∏≠ "85.3 %"
//   "is_charging": isCharging(solarV, solarI), // bool - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏≤‡∏£‡πå‡∏à
//   "timestamp": millis()           // unsigned long - ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤
// }
//
// ‚ö° CRITICAL BATTERY STATUS LOGIC:
// - ‡πÄ‡∏°‡∏∑‡πà‡∏≠ isCharging() = true ‚Üí ‡πÅ‡∏™‡∏î‡∏á "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à..." 
//   (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ loadV = ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÅ‡∏ö‡∏ï + ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå = ‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô)
// - ‡πÄ‡∏°‡∏∑‡πà‡∏≠ isCharging() = false ‚Üí ‡πÅ‡∏™‡∏î‡∏á % ‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á
//   (loadV = ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÅ‡∏ö‡∏ï‡∏à‡∏£‡∏¥‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
//
// ü§ñ AI READABLE VARIABLES:
// - currentSolarVoltage: ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (V)
// - currentSolarCurrent: ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (A)
// - currentLoadVoltage: ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î/‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (V)
// - currentLoadCurrent: ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (A)
// - currentBatteryPercent: ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà (0-100 ‡∏´‡∏£‡∏∑‡∏≠ -1 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏≤‡∏£‡πå‡∏à)
// - isCurrentlyCharging: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à (true/false)
// - currentSolarPower: ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå (W)
// - currentLoadPower: ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏•‡∏î (W)
// - batteryStatusText: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
//
// üåê WEB DASHBOARD INTEGRATION:
// - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß üîã‚ö°
// - ‡πÅ‡∏™‡∏î‡∏á % ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ä‡∏≤‡∏£‡πå‡∏à
// - ‡∏Å‡∏£‡∏≤‡∏ü Real-time Power Flow: Solar ‚Üí Battery ‚Üí Load
// - Alert ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ï‡∏ï‡πà‡∏≥ (< 20%) ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
//
// üîÑ PI SERVER INTEGRATION:
// - ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Serial (115200 baud)
// - ‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase: /fish-feeder-system/power/
// - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (Event-driven, NO delay())
// - Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Analytics
//
// üìä SENSOR CALIBRATION NOTES:
// - ACS712-30A Sensitivity: 0.066 V/A
// - Zero Point: 2.5V (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° offset ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå)
// - Voltage Divider: 4.50x (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏á‡∏à‡∏£‡∏à‡∏£‡∏¥‡∏á)
// - Sample Count: 150 (‡∏•‡∏î noise, ‡πÄ‡∏û‡∏¥‡πà‡∏° accuracy)
//
// ‚ö†Ô∏è IMPORTANT - NO MOCKUP DATA:
// - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
// - ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
// - ‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô ADC ‡∏à‡∏£‡∏¥‡∏á
// - Error handling: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏µ‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠ null
//
// üöÄ ARDUINO JSON COMMUNICATION WITH RASPBERRY PI 4:
// - #include <ArduinoJson.h> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON processing
// - Pi ‚Üí Arduino: {"command": "read_battery_status", "sensor_id": "solar_monitor"} 
// - Arduino ‚Üí Pi: {"battery_percent": 85, "solar_voltage": 12.5, "load_current": 2.3, "is_charging": true, "battery_status": "normal", "timestamp": 12345}
// - Pi Serial Commands: 115200 baud, newline terminated
// - Bi-directional communication ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö power management ‡πÅ‡∏•‡∏∞ energy optimization
