import React, { useState, useEffect } from "react";

interface FeedSession {
  id: string;
  start_timestamp?: string;
  end_timestamp?: string;
  timestamp?: string; // For standalone alerts
  template?: string;
  target_weight?: number;
  weight_fed?: number;
  status?: string;
  reason?: string;
  start_sensors?: {
    temp: number;
    humidity: number;
    water_temp: number;
    bin_weight: number;
    voltage: number;
    soil_moisture: number;
  };
  end_sensors?: {
    temp: number;
    humidity: number;
    water_temp: number;
    bin_weight: number;
    voltage: number;
    soil_moisture: number;
  };
  sensors?: {
    // For standalone alerts
    temp: number;
    humidity: number;
    water_temp: number;
    bin_weight: number;
    voltage: number;
    soil_moisture: number;
  };
  alerts?: Array<{
    timestamp: string;
    alert_type: string;
    message: string;
    sensors: any;
  }>;
  video_local?: string;
  video_cloud?: string;
  duration_seconds?: number;
  type?: string;
  alert_type?: string;
  message?: string;
}

interface FilterState {
  start_date: string;
  end_date: string;
  template: string;
  alert_type: string;
}

interface ChartPoint {
  time: string;
  temperature: number;
  humidity: number;
  water_temp: number;
  voltage: number;
}

const FeedHistory: React.FC = () => {
  const [sessions, setSessions] = useState<FeedSession[]>([]);
  const [filteredSessions, setFilteredSessions] = useState<FeedSession[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedSession, setSelectedSession] = useState<FeedSession | null>(
    null,
  );
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState<FilterState>({
    start_date: "",
    end_date: "",
    template: "",
    alert_type: "",
  });

  // Chart data for sensor readings
  const [chartData, setChartData] = useState<ChartPoint[]>([]);

  useEffect(() => {
    fetchFeedHistory();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [sessions, filters]);

  const fetchFeedHistory = async () => {
    try {
      setLoading(true);
      const response = await fetch("/api/feed/history");
      const result = await response.json();

      if (result.status === "success") {
        setSessions(result.data);
      } else {
        setError(result.message || "Failed to fetch feed history");
      }
    } catch (err) {
      setError("Error connecting to server");
    } finally {
      setLoading(false);
    }
  };

  const applyFilters = async () => {
    let filtered = [...sessions];

    // Apply local filters first
    if (filters.template) {
      filtered = filtered.filter(
        (session) => session.template === filters.template,
      );
    }

    // If we have date range or alert type, use API
    if (filters.start_date && filters.end_date) {
      try {
        const response = await fetch("/api/feed/history/filter", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            start_date: filters.start_date,
            end_date: filters.end_date,
          }),
        });
        const result = await response.json();

        if (result.status === "success") {
          filtered = result.data;
        }
      } catch (err) {
        console.error("Error applying date filter:", err);
      }
    }

    if (filters.alert_type) {
      try {
        const response = await fetch("/api/feed/history/filter", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            alert_type: filters.alert_type,
          }),
        });
        const result = await response.json();

        if (result.status === "success") {
          filtered = result.data;
        }
      } catch (err) {
        console.error("Error applying alert filter:", err);
      }
    }

    setFilteredSessions(filtered);
  };

  const handleSessionClick = (session: FeedSession) => {
    setSelectedSession(session);

    // Prepare chart data from sensor readings
    const chartPoints: ChartPoint[] = [];

    if (session.start_sensors) {
      chartPoints.push({
        time: "Start",
        temperature: session.start_sensors.temp || 0,
        humidity: session.start_sensors.humidity || 0,
        water_temp: session.start_sensors.water_temp || 0,
        voltage: session.start_sensors.voltage || 0,
      });
    }

    if (session.end_sensors) {
      chartPoints.push({
        time: "End",
        temperature: session.end_sensors.temp || 0,
        humidity: session.end_sensors.humidity || 0,
        water_temp: session.end_sensors.water_temp || 0,
        voltage: session.end_sensors.voltage || 0,
      });
    }

    // Add alert points
    session.alerts?.forEach((alert, index) => {
      if (alert.sensors) {
        chartPoints.push({
          time: `Alert ${index + 1}`,
          temperature: alert.sensors.temp || 0,
          humidity: alert.sensors.humidity || 0,
          water_temp: alert.sensors.water_temp || 0,
          voltage: alert.sensors.voltage || 0,
        });
      }
    });

    setChartData(chartPoints);
  };

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;

    return `${mins}m ${secs}s`;
  };

  const getSessionIcon = (session: FeedSession) => {
    if (session.type === "standalone_alert") {
      return <span className="text-red-500 text-lg">⚠️</span>;
    }

    return <span className="text-blue-500 text-lg">🕒</span>;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "completed":
        return "text-green-600 bg-green-100";
      case "in_progress":
        return "text-yellow-600 bg-yellow-100";
      case "failed":
        return "text-red-600 bg-red-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  const SimpleChart = ({ data }: { data: ChartPoint[] }) => {
    if (data.length === 0) return null;

    return (
      <div className="space-y-4">
        {data.map((point, index) => (
          <div key={index} className="bg-gray-50 p-3 rounded">
            <h4 className="font-medium mb-2">{point.time}</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
              <div className="flex items-center">
                <span className="w-3 h-3 bg-red-500 rounded-full mr-2" />
                Temp: {point.temperature.toFixed(1)}°C
              </div>
              <div className="flex items-center">
                <span className="w-3 h-3 bg-blue-500 rounded-full mr-2" />
                Humidity: {point.humidity.toFixed(1)}%
              </div>
              <div className="flex items-center">
                <span className="w-3 h-3 bg-cyan-500 rounded-full mr-2" />
                Water: {point.water_temp.toFixed(1)}°C
              </div>
              <div className="flex items-center">
                <span className="w-3 h-3 bg-purple-500 rounded-full mr-2" />
                Voltage: {point.voltage.toFixed(1)}V
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold text-red-600 mb-2">Error</h2>
          <p className="text-gray-600">{error}</p>
          <button
            className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            onClick={fetchFeedHistory}
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-bold text-gray-800">Feed History</h1>
            <button
              className="flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
              onClick={() => setShowFilters(!showFilters)}
            >
              <span className="mr-2">🔍</span>
              Filters
            </button>
          </div>

          <div className="mt-4 grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="text-sm font-medium text-blue-800">
                Total Sessions
              </h3>
              <p className="text-2xl font-bold text-blue-900">
                {sessions.length}
              </p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <h3 className="text-sm font-medium text-green-800">Completed</h3>
              <p className="text-2xl font-bold text-green-900">
                {sessions.filter((s) => s.status === "completed").length}
              </p>
            </div>
            <div className="bg-red-50 p-4 rounded-lg">
              <h3 className="text-sm font-medium text-red-800">Total Alerts</h3>
              <p className="text-2xl font-bold text-red-900">
                {sessions.reduce((sum, s) => sum + (s.alerts?.length || 0), 0) +
                  sessions.filter((s) => s.type === "standalone_alert").length}
              </p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <h3 className="text-sm font-medium text-purple-800">
                Total Weight Fed
              </h3>
              <p className="text-2xl font-bold text-purple-900">
                {sessions
                  .reduce((sum, s) => sum + (s.weight_fed || 0), 0)
                  .toFixed(2)}{" "}
                kg
              </p>
            </div>
          </div>
        </div>

        {/* Filters */}
        {showFilters && (
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 className="text-lg font-semibold mb-4">Filter Options</h2>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Start Date
                </label>
                <input
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  type="date"
                  value={filters.start_date}
                  onChange={(e) =>
                    setFilters({ ...filters, start_date: e.target.value })
                  }
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  End Date
                </label>
                <input
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  type="date"
                  value={filters.end_date}
                  onChange={(e) =>
                    setFilters({ ...filters, end_date: e.target.value })
                  }
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Template
                </label>
                <select
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={filters.template}
                  onChange={(e) =>
                    setFilters({ ...filters, template: e.target.value })
                  }
                >
                  <option value="">All Templates</option>
                  <option value="small">Small</option>
                  <option value="medium">Medium</option>
                  <option value="large">Large</option>
                  <option value="custom">Custom</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Alert Type
                </label>
                <select
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={filters.alert_type}
                  onChange={(e) =>
                    setFilters({ ...filters, alert_type: e.target.value })
                  }
                >
                  <option value="">All Alerts</option>
                  <option value="high_temperature">High Temperature</option>
                  <option value="low_battery">Low Battery</option>
                  <option value="low_weight">Low Weight</option>
                </select>
              </div>
            </div>
            <div className="mt-4 flex gap-2">
              <button
                className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                onClick={() =>
                  setFilters({
                    start_date: "",
                    end_date: "",
                    template: "",
                    alert_type: "",
                  })
                }
              >
                Clear Filters
              </button>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Sessions List */}
          <div className="bg-white rounded-lg shadow-md">
            <div className="p-6 border-b">
              <h2 className="text-lg font-semibold">Sessions & Alerts</h2>
            </div>
            <div className="max-h-96 overflow-y-auto">
              {filteredSessions.map((session) => (
                <div
                  key={session.id}
                  className={`p-4 border-b cursor-pointer hover:bg-gray-50 ${
                    selectedSession?.id === session.id
                      ? "bg-blue-50 border-l-4 border-l-blue-500"
                      : ""
                  }`}
                  onClick={() => handleSessionClick(session)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {getSessionIcon(session)}
                      <div>
                        <div className="font-medium">
                          {session.type === "standalone_alert"
                            ? `Alert: ${session.alert_type}`
                            : `Feed: ${session.template}`}
                        </div>
                        <div className="text-sm text-gray-500">
                          {new Date(
                            session.start_timestamp || session.timestamp || "",
                          ).toLocaleString()}
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      {session.type !== "standalone_alert" &&
                        session.status && (
                          <div
                            className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(session.status)}`}
                          >
                            {session.status}
                          </div>
                        )}
                      {session.video_local && (
                        <span className="text-green-500 mt-1 block">📹</span>
                      )}
                    </div>
                  </div>

                  {session.type !== "standalone_alert" && (
                    <div className="mt-2 grid grid-cols-3 gap-2 text-xs text-gray-600">
                      <div>
                        Weight: {(session.weight_fed || 0).toFixed(2)} kg
                      </div>
                      <div>
                        Duration:{" "}
                        {formatDuration(session.duration_seconds || 0)}
                      </div>
                      <div>Alerts: {session.alerts?.length || 0}</div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* Session Details & Chart */}
          <div className="space-y-6">
            {selectedSession && (
              <>
                {/* Session Details */}
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h2 className="text-lg font-semibold mb-4">
                    Session Details
                  </h2>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium">ID:</span>{" "}
                      {selectedSession.id}
                    </div>
                    <div>
                      <span className="font-medium">Template:</span>{" "}
                      {selectedSession.template || "N/A"}
                    </div>
                    <div>
                      <span className="font-medium">Start:</span>{" "}
                      {new Date(
                        selectedSession.start_timestamp ||
                          selectedSession.timestamp ||
                          "",
                      ).toLocaleString()}
                    </div>
                    <div>
                      <span className="font-medium">End:</span>{" "}
                      {selectedSession.end_timestamp
                        ? new Date(
                            selectedSession.end_timestamp,
                          ).toLocaleString()
                        : "N/A"}
                    </div>
                    {selectedSession.type !== "standalone_alert" && (
                      <>
                        <div>
                          <span className="font-medium">Weight Fed:</span>{" "}
                          {(selectedSession.weight_fed || 0).toFixed(2)} kg
                        </div>
                        <div>
                          <span className="font-medium">Duration:</span>{" "}
                          {formatDuration(
                            selectedSession.duration_seconds || 0,
                          )}
                        </div>
                      </>
                    )}
                  </div>

                  {selectedSession.video_local && (
                    <div className="mt-4">
                      <button className="flex items-center px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                        <span className="mr-2">▶️</span>
                        View Video
                      </button>
                    </div>
                  )}
                </div>

                {/* Sensor Chart */}
                {chartData.length > 0 && (
                  <div className="bg-white rounded-lg shadow-md p-6">
                    <h2 className="text-lg font-semibold mb-4">
                      Sensor Readings
                    </h2>
                    <SimpleChart data={chartData} />
                  </div>
                )}

                {/* Alerts */}
                {selectedSession.alerts &&
                  selectedSession.alerts.length > 0 && (
                    <div className="bg-white rounded-lg shadow-md p-6">
                      <h2 className="text-lg font-semibold mb-4">
                        Alerts ({selectedSession.alerts.length})
                      </h2>
                      <div className="space-y-3">
                        {selectedSession.alerts.map((alert, index) => (
                          <div
                            key={index}
                            className="bg-red-50 border border-red-200 rounded-lg p-3"
                          >
                            <div className="flex items-center gap-2">
                              <span className="text-red-500">⚠️</span>
                              <span className="font-medium text-red-800">
                                {alert.alert_type}
                              </span>
                              <span className="text-sm text-red-600">
                                {new Date(alert.timestamp).toLocaleString()}
                              </span>
                            </div>
                            <p className="text-sm text-red-700 mt-1">
                              {alert.message}
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default FeedHistory;
