import { useState, useEffect } from "react";
import { Slider } from "@heroui/slider";
import { Switch } from "@heroui/switch";
import { Button } from "@heroui/button";
import { FaTemperatureHigh, FaFan } from "react-icons/fa";
import { HiStatusOnline } from "react-icons/hi";
import { RiBlazeFill } from "react-icons/ri";
import { IoMdSettings } from "react-icons/io";
import { Input } from "@heroui/input";
import { ResponsiveContainer, LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line } from "recharts";

import {
  API_CONFIG,
  FishFeederApiClient,
  BlowerControlRequest,
} from "../config/api";

// Define the SliderStepMark type based on HeroUI docs
type SliderStepMark = {
  value: number;
  label: string;
};

const FanTempControl = () => {
  // States for fan control
  const [systemTemperature, setSystemTemperature] = useState(25); // Actual current temperature from DHT22_SYSTEM
  const [feederTemperature, setFeederTemperature] = useState(25); // Temperature from DHT22_FEEDER
  const [temperatureThreshold, setTemperatureThreshold] = useState(30); // Fan activation threshold
  const [autoFanMode, setAutoFanMode] = useState(true);
  const [fanStatus, setFanStatus] = useState(false);
  const [blowerSpeed, setBlowerSpeed] = useState(100);
  const [loading, setLoading] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState("Connecting...");
  const [apiClient] = useState(new FishFeederApiClient());
  const [tempThreshold, setTempThreshold] = useState(30);
  const [hysteresis, setHysteresis] = useState(2);
  const [updateInterval, setUpdateInterval] = useState(3);
  const [tempHistory, setTempHistory] = useState<any[]>([
    { time: "12:00", feederTemp: 25, systemTemp: 23, threshold: 30 },
    { time: "13:00", feederTemp: 26, systemTemp: 24, threshold: 30 },
    { time: "14:00", feederTemp: 28, systemTemp: 25, threshold: 30 },
  ]);

  // Define slider marks
  const temperatureMarks: SliderStepMark[] = [
    { value: 20, label: "20¬∞C" },
    { value: 25, label: "25¬∞C" },
    { value: 30, label: "30¬∞C" },
    { value: 35, label: "35¬∞C" },
    { value: 40, label: "40¬∞C" },
  ];

  const speedMarks: SliderStepMark[] = [
    { value: 0, label: "0%" },
    { value: 50, label: "50%" },
    { value: 100, label: "100%" },
    { value: 150, label: "150%" },
    { value: 200, label: "200%" },
    { value: 255, label: "255%" },
  ];

  // Fetch temperature data from Pi server
  const fetchTemperatureData = async () => {
    try {
      // Get DHT22_SYSTEM data (control box temperature)
      const systemSensor = await apiClient.getSensor(
        API_CONFIG.SENSOR_NAMES.DHT22_SYSTEM,
      );
      const systemTemp = systemSensor.values.find(
        (v) => v.type === "temperature",
      );

      if (systemTemp && typeof systemTemp.value === "number") {
        setSystemTemperature(systemTemp.value);
      }

      // Get DHT22_FEEDER data (feeder bucket temperature)
      const feederSensor = await apiClient.getSensor(
        API_CONFIG.SENSOR_NAMES.DHT22_FEEDER,
      );
      const feederTemp = feederSensor.values.find(
        (v) => v.type === "temperature",
      );

      if (feederTemp && typeof feederTemp.value === "number") {
        setFeederTemperature(feederTemp.value);
      }

      setConnectionStatus("‚úÖ Connected to Pi Server");
    } catch (error) {
      console.error("Failed to fetch temperature data:", error);
      setConnectionStatus("‚ùå Mock Data");

      // Simulate temperature changes for demo
      setSystemTemperature((prev) => {
        const fluctuation = (Math.random() - 0.5) * 0.5;

        return Math.round((prev + fluctuation) * 10) / 10;
      });
      setFeederTemperature((prev) => {
        const fluctuation = (Math.random() - 0.5) * 0.3;

        return Math.round((prev + fluctuation) * 10) / 10;
      });
    }
  };

  // Effect to control fan based on temperature when in auto mode
  useEffect(() => {
    if (autoFanMode) {
      // Use the higher of the two temperatures for fan control
      const maxTemp = Math.max(systemTemperature, feederTemperature);
      const shouldActivate = maxTemp >= temperatureThreshold;

      if (shouldActivate !== fanStatus) {
        setFanStatus(shouldActivate);
        // Auto control the blower based on temperature
        if (shouldActivate) {
          handleBlowerControl("start");
        } else {
          handleBlowerControl("stop");
        }
      }
    }
  }, [
    systemTemperature,
    feederTemperature,
    temperatureThreshold,
    autoFanMode,
    fanStatus,
  ]);

  // Fetch temperature data on component mount and set interval
  useEffect(() => {
    fetchTemperatureData();
    const interval = setInterval(
      fetchTemperatureData,
      API_CONFIG.REFRESH_INTERVALS.SENSORS,
    );

    return () => clearInterval(interval);
  }, []);

  // Handle blower control via Pi server API
  const handleBlowerControl = async (
    action: BlowerControlRequest["action"],
    value?: number,
  ) => {
    try {
      setLoading(true);
      const request: BlowerControlRequest = { action };

      if (value !== undefined) {
        request.value = value;
      }

      const response = await apiClient.controlBlower(request);

      console.log(`Blower ${action} response:`, response);

      if (response.status === "success") {
        if (action === "start") {
          setFanStatus(true);
        } else if (action === "stop") {
          setFanStatus(false);
        }
      }
    } catch (error) {
      console.error(`Failed to ${action} blower:`, error);
      // Update local state anyway for demo purposes
      if (action === "start") {
        setFanStatus(true);
      } else if (action === "stop") {
        setFanStatus(false);
      }
    } finally {
      setLoading(false);
    }
  };

  // Handle manual fan toggle
  const handleManualFanToggle = async () => {
    if (!autoFanMode) {
      const action = fanStatus ? "stop" : "start";

      await handleBlowerControl(action);
    }
  };

  // Handle speed change
  const handleSpeedChange = async (newSpeed: number) => {
    setBlowerSpeed(newSpeed);
    if (fanStatus) {
      await handleBlowerControl("speed", newSpeed);
    }
  };

  const loadTemperatureData = async () => {
    try {
      // Mock temperature history data
      const mockHistory = [
        { time: "12:00", feederTemp: 25, systemTemp: 23, threshold: tempThreshold },
        { time: "13:00", feederTemp: 26, systemTemp: 24, threshold: tempThreshold },
        { time: "14:00", feederTemp: 28, systemTemp: 25, threshold: tempThreshold },
        { time: "15:00", feederTemp: 29, systemTemp: 26, threshold: tempThreshold },
      ];
      setTempHistory(mockHistory);
    } catch (error) {
      console.error("Failed to load temperature history:", error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 p-6 space-y-6">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-100 dark:border-gray-700">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
              üå°Ô∏è Fan & Temperature Control
            </h1>
            <p className="text-gray-600 dark:text-gray-400 mt-1">
              Monitor temperature and control cooling systems
            </p>
          </div>
          <div className="text-right text-sm">
            <div
              className={`font-semibold ${
                connectionStatus.includes("‚úÖ")
                  ? "text-green-600 dark:text-green-400"
                  : connectionStatus.includes("‚ö†Ô∏è")
                    ? "text-yellow-600 dark:text-yellow-400"
                    : "text-red-600 dark:text-red-400"
              }`}
            >
              {connectionStatus}
            </div>
            <div className="text-gray-500 dark:text-gray-400">
              API: {API_CONFIG.BASE_URL}
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Temperature Monitoring */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-100 dark:border-gray-700">
          <div className="flex items-center text-red-500 dark:text-red-400 mb-6">
            <FaTemperatureHigh className="mr-3 text-xl" />
            <h2 className="text-xl font-semibold">Temperature Monitoring</h2>
          </div>

          <div className="space-y-4">
            {/* Feeder Temperature */}
            <div className="bg-gradient-to-br from-red-50 to-orange-50 dark:from-red-900/20 dark:to-orange-900/20 rounded-lg p-4 border border-red-200 dark:border-red-700">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Feeder Temperature
                </span>
                <FaTemperatureHigh className="text-red-500 dark:text-red-400" />
              </div>
              <div className="text-3xl font-bold text-red-700 dark:text-red-300 mb-2">
                {feederTemperature.toFixed(1)}¬∞C
              </div>
              <div className="text-xs text-red-600 dark:text-red-400">
                DHT22 Sensor
              </div>
            </div>

            {/* System Temperature */}
            <div className="bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-700">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  System Temperature
                </span>
                <FaTemperatureHigh className="text-blue-500 dark:text-blue-400" />
              </div>
              <div className="text-3xl font-bold text-blue-700 dark:text-blue-300 mb-2">
                {systemTemperature.toFixed(1)}¬∞C
              </div>
              <div className="text-xs text-blue-600 dark:text-blue-400">
                System Monitor
              </div>
            </div>

            {/* Temperature Status */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <div className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Status
              </div>
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600 dark:text-gray-400">Feeder:</span>
                  <span
                    className={`text-sm font-medium ${
                      feederTemperature > tempThreshold
                        ? "text-red-600 dark:text-red-400"
                        : "text-green-600 dark:text-green-400"
                    }`}
                  >
                    {feederTemperature > tempThreshold ? "Hot" : "Normal"}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600 dark:text-gray-400">System:</span>
                  <span
                    className={`text-sm font-medium ${
                      systemTemperature > tempThreshold
                        ? "text-red-600 dark:text-red-400"
                        : "text-green-600 dark:text-green-400"
                    }`}
                  >
                    {systemTemperature > tempThreshold ? "Hot" : "Normal"}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Fan Control */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-100 dark:border-gray-700">
          <div className="flex items-center text-blue-500 dark:text-blue-400 mb-6">
            <RiBlazeFill className="mr-3 text-xl" />
            <h2 className="text-xl font-semibold">Fan Control</h2>
          </div>

          <div className="space-y-6">
            {/* Auto Mode Toggle */}
            <div className="flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
              <div>
                <div className="font-medium text-gray-900 dark:text-gray-100">
                  Auto Mode
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Fan turns on when temp {'>'} {tempThreshold}¬∞C
                </div>
              </div>
              <Switch
                isSelected={autoFanMode}
                onValueChange={setAutoFanMode}
              />
            </div>

            {/* Manual Controls */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Manual Control
                </span>
                <span className={`text-xs px-2 py-1 rounded-full ${
                  autoFanMode 
                    ? "bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400" 
                    : "bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300"
                }`}>
                  {autoFanMode ? "Disabled" : "Active"}
                </span>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <Button
                  color="success"
                  variant={fanStatus === "on" ? "solid" : "bordered"}
                  isLoading={loading}
                  isDisabled={autoFanMode}
                  onPress={() => handleBlowerControl("start")}
                  className="h-12"
                >
                  <div className="flex items-center">
                    <RiBlazeFill className="mr-2" />
                    Fan ON
                  </div>
                </Button>
                <Button
                  color="danger"
                  variant={fanStatus === "off" ? "solid" : "bordered"}
                  isLoading={loading}
                  isDisabled={autoFanMode}
                  onPress={() => handleBlowerControl("stop")}
                  className="h-12"
                >
                  <div className="flex items-center">
                    <RiBlazeFill className="mr-2" />
                    Fan OFF
                  </div>
                </Button>
              </div>
            </div>

            {/* Current Status */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <div className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                Current Status
              </div>
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600 dark:text-gray-400">Fan:</span>
                  <span className={`text-sm font-medium flex items-center ${
                    fanStatus === "on" 
                      ? "text-green-600 dark:text-green-400" 
                      : "text-gray-600 dark:text-gray-400"
                  }`}>
                    <div className={`w-2 h-2 rounded-full mr-2 ${
                      fanStatus === "on" ? "bg-green-500" : "bg-gray-400"
                    }`} />
                    {fanStatus === "on" ? "Running" : "Stopped"}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600 dark:text-gray-400">Mode:</span>
                  <span className="text-sm font-medium text-gray-900 dark:text-gray-100">
                    {autoFanMode ? "Automatic" : "Manual"}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600 dark:text-gray-400">Threshold:</span>
                  <span className="text-sm font-medium text-gray-900 dark:text-gray-100">
                    {tempThreshold}¬∞C
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Settings Panel */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-100 dark:border-gray-700">
        <div className="flex items-center text-purple-500 dark:text-purple-400 mb-6">
          <IoMdSettings className="mr-3 text-xl" />
          <h2 className="text-xl font-semibold">Temperature Settings</h2>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Temperature Threshold */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Temperature Threshold (¬∞C)
            </label>
            <Input
              type="number"
              value={tempThreshold.toString()}
              onChange={(e) => setTempThreshold(Number(e.target.value))}
              placeholder="30"
              min="20"
              max="50"
            />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Fan will activate above this temperature
            </p>
          </div>

          {/* Hysteresis */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Hysteresis (¬∞C)
            </label>
            <Input
              type="number"
              value={hysteresis.toString()}
              onChange={(e) => setHysteresis(Number(e.target.value))}
              placeholder="2"
              min="1"
              max="10"
            />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Temperature difference for fan off
            </p>
          </div>

          {/* Update Interval */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Update Interval (seconds)
            </label>
            <Input
              type="number"
              value={updateInterval.toString()}
              onChange={(e) => setUpdateInterval(Number(e.target.value))}
              placeholder="3"
              min="1"
              max="60"
            />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              How often to check temperature
            </p>
          </div>
        </div>

        {/* Save Settings Button */}
        <div className="mt-6">
          <Button
            color="primary"
            onPress={() => {
              // Save settings logic here
              alert("Settings saved successfully!");
            }}
            startContent={<IoMdSettings />}
          >
            Save Settings
          </Button>
        </div>
      </div>

      {/* Temperature History Chart */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-100 dark:border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
            üìà Temperature History (Last 24 Hours)
          </h2>
          <Button
            size="sm"
            variant="bordered"
            onPress={loadTemperatureData}
            isLoading={loading}
          >
            üîÑ Refresh
          </Button>
        </div>

        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={tempHistory}>
              <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
              <XAxis 
                dataKey="time" 
                tick={{ fontSize: 12 }}
                className="text-gray-600 dark:text-gray-400"
              />
              <YAxis 
                tick={{ fontSize: 12 }}
                className="text-gray-600 dark:text-gray-400"
              />
              <Tooltip 
                contentStyle={{
                  backgroundColor: "rgba(0, 0, 0, 0.8)",
                  border: "none",
                  borderRadius: "8px",
                  color: "white"
                }}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="feederTemp"
                stroke="#ef4444"
                strokeWidth={2}
                name="Feeder Temp (¬∞C)"
                dot={{ fill: "#ef4444", strokeWidth: 2, r: 3 }}
              />
              <Line
                type="monotone"
                dataKey="systemTemp"
                stroke="#3b82f6"
                strokeWidth={2}
                name="System Temp (¬∞C)"
                dot={{ fill: "#3b82f6", strokeWidth: 2, r: 3 }}
              />
              <Line
                type="monotone"
                dataKey="threshold"
                stroke="#9ca3af"
                strokeWidth={1}
                strokeDasharray="5 5"
                name="Threshold"
                dot={false}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* System Information */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-100 dark:border-gray-700">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
          üí° System Information
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600 dark:text-gray-400">Auto Mode:</span>
              <span className="font-medium text-gray-900 dark:text-gray-100">
                {autoFanMode ? "Enabled" : "Disabled"}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600 dark:text-gray-400">Last Update:</span>
              <span className="font-medium text-gray-900 dark:text-gray-100">
                {new Date().toLocaleTimeString()}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600 dark:text-gray-400">Data Source:</span>
              <span className="font-medium text-gray-900 dark:text-gray-100">
                Pi Server DHT22
              </span>
            </div>
          </div>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600 dark:text-gray-400">Fan Status:</span>
              <span className={`font-medium ${
                fanStatus === "on" 
                  ? "text-green-600 dark:text-green-400" 
                  : "text-gray-600 dark:text-gray-400"
              }`}>
                {fanStatus === "on" ? "Running" : "Stopped"}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600 dark:text-gray-400">Cooling Needed:</span>
              <span className={`font-medium ${
                Math.max(feederTemperature, systemTemperature) > tempThreshold
                  ? "text-red-600 dark:text-red-400"
                  : "text-green-600 dark:text-green-400"
              }`}>
                {Math.max(feederTemperature, systemTemperature) > tempThreshold ? "Yes" : "No"}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600 dark:text-gray-400">Max Temp Today:</span>
              <span className="font-medium text-gray-900 dark:text-gray-100">
                {Math.max(...tempHistory.map(t => Math.max(t.feederTemp, t.systemTemp))).toFixed(1)}¬∞C
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FanTempControl;
