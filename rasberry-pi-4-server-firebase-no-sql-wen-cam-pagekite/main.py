#!/usr/bin/env python3  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Python 3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
"""
üêü FISH FEEDER IoT SYSTEM - OPTIMIZED PERFORMANCE VERSION
================================================
‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ performance ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏ö background loops ‡πÅ‡∏•‡∏∞‡∏•‡∏î logging
Arduino Mega 2560 ‚Üî Raspberry Pi 4 ‚Üî Firebase ‚Üî React Web App

INTEGRATED FIREBASE COMMAND LISTENER:
- Listens to Firebase /controls/ path for commands
- Translates JSON commands to Arduino serial commands
- Supports all control functions: relay, auger, actuator, blower, sensors
- Real-time command processing with Firebase listeners

Usage:
    python main.py                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö
    python main.py --test        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    python main.py --firebase    # Firebase ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
"""

import sys  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ sys module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö
import os  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ os module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö operating system
import time  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ time module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
import json  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ json module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á JSON
import signal  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ signal module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ signal
import logging  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ logging module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log
import argparse  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ argparse module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command line arguments
import threading  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ threading module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ multi-threading
import subprocess  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ subprocess module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô external processes
from datetime import datetime  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ datetime class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
from pathlib import Path  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Path class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ file paths
from typing import Dict, Any, Optional  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ type hints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î types

# Import serial communication
try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ serial modules
    import serial  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ serial module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ serial
    import serial.tools.list_ports  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ list_ports ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ serial ports
    SERIAL_AVAILABLE = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ serial ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
except ImportError:  # ‡∏´‡∏≤‡∏Å import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    SERIAL_AVAILABLE = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ serial ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    print("‚ö†Ô∏è Warning: pyserial not available - Arduino features disabled")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# Flask imports
try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Flask modules
    from flask import Flask, jsonify, request, make_response  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Flask classes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö web server
    from flask_cors import CORS  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CORS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cross-origin requests
    FLASK_AVAILABLE = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ Flask ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
except ImportError:  # ‡∏´‡∏≤‡∏Å import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    FLASK_AVAILABLE = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ Flask ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    print("‚ö†Ô∏è Warning: Flask not available - Web API disabled")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# Firebase imports
try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Firebase modules
    import firebase_admin  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ firebase_admin module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Firebase
    from firebase_admin import credentials, db  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ credentials ‡πÅ‡∏•‡∏∞ db ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase authentication ‡πÅ‡∏•‡∏∞ database
    FIREBASE_AVAILABLE = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ Firebase ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
except ImportError:  # ‡∏´‡∏≤‡∏Å import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    FIREBASE_AVAILABLE = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ Firebase ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    print("‚ö†Ô∏è Warning: Firebase not available - Cloud features disabled")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# SocketIO imports
try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SocketIO modules
    from flask_socketio import SocketIO, emit  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SocketIO ‡πÅ‡∏•‡∏∞ emit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time communication
    SOCKETIO_AVAILABLE = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ SocketIO ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
except ImportError:  # ‡∏´‡∏≤‡∏Å import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    SOCKETIO_AVAILABLE = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ SocketIO ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

# ‚úÖ Firebase Command Listener functionality is INTEGRATED in main.py
# Real-time Firebase database listening with Arduino command translation
FIREBASE_LISTENER_AVAILABLE = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ Firebase Listener ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (integrated functionality)

# PCDA 5W1H Error Handler
try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ error handler modules
    from error_handler import (  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ error handler functions
        error_handler, handle_critical_error, handle_communication_error,  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ error handling functions
        handle_hardware_error, handle_software_error, ErrorContext,  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ error handling classes
        ErrorSeverity, ErrorCategory  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ error classification enums
    )
    ERROR_HANDLER_AVAILABLE = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ Error Handler ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
except ImportError:  # ‡∏´‡∏≤‡∏Å import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    ERROR_HANDLER_AVAILABLE = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤ Error Handler ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    print("‚ö†Ô∏è Warning: Error Handler not available")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# ===== SIMPLE LOGGING SYSTEM =====
def setup_minimal_logging():  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging system ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    """Setup minimal logging system"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    logger = logging.getLogger(__name__)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á logger object ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á module ‡∏ô‡∏µ‡πâ
    logger.setLevel(logging.INFO)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging level ‡πÄ‡∏õ‡πá‡∏ô INFO ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (INFO ‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤)
    
    # Console handler only
    handler = logging.StreamHandler(sys.stdout)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô console
    formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")  # ‡∏™‡∏£‡πâ‡∏≤‡∏á formatter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    handler.setFormatter(formatter)  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î formatter ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö handler
    logger.addHandler(handler)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö logger
    
    # Suppress noisy libraries
    logging.getLogger('werkzeug').setLevel(logging.ERROR)  # ‡∏õ‡∏¥‡∏î log ‡∏Ç‡∏≠‡∏á werkzeug ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà ERROR
    logging.getLogger('urllib3').setLevel(logging.ERROR)  # ‡∏õ‡∏¥‡∏î log ‡∏Ç‡∏≠‡∏á urllib3 ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà ERROR
    
    return logger  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ logger object

# Global logger
logger = setup_minimal_logging()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á global logger ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup_minimal_logging

# ===== CONFIGURATION =====
class Config:  # ‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    # Arduino
    ARDUINO_PORT = 'COM3'  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î port ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino
    ARDUINO_BAUD = 115200  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î baud rate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ serial
    ARDUINO_TIMEOUT = 5  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeout ‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠ response
    
    # Firebase
    FIREBASE_URL = "https://fish-feeder-iot-default-rtdb.firebaseio.com/"  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏Ç‡∏≠‡∏á Firebase Realtime Database
    
    # Web Server
    WEB_HOST = '0.0.0.0'  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î host ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö web server (0.0.0.0 = ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å IP)
    WEB_PORT = 5000  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î port ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö web server
    WEB_DEBUG = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ debug mode ‡πÄ‡∏õ‡πá‡∏ô False
    
    # Caching
    CACHE_DURATION = 3  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ cache sensor data ‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    MAX_RETRIES = 2  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô retry ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

# ===== DATA CACHE =====
class DataCache:  # ‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    def __init__(self):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á instance
        self.cache = {}  # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache
        self.timestamps = {}  # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    def get(self, key: str, max_age: int = Config.CACHE_DURATION) -> Optional[Any]:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        """Get cached data if not expired"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        if key not in self.cache:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ key ‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô cache ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            return None  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
        
        age = time.time() - self.timestamps.get(key, 0)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if age > max_age:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            return None  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏´‡∏≤‡∏Å‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        
        return self.cache[key]  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà cache ‡πÑ‡∏ß‡πâ
    
    def set(self, key: str, value: Any):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache ‡∏û‡∏£‡πâ‡∏≠‡∏° timestamp
        """Set cached data with timestamp"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        self.cache[key] = value  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache dictionary
        self.timestamps[key] = time.time()  # ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key ‡∏ô‡∏±‡πâ‡∏ô
    
    def clear(self, key: str = None):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache
        """Clear specific key or all cache"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        if key:  # ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏ key ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            self.cache.pop(key, None)  # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á key ‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å cache
            self.timestamps.pop(key, None)  # ‡∏•‡∏ö timestamp ‡∏Ç‡∏≠‡∏á key ‡∏ô‡∏±‡πâ‡∏ô
        else:  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ key
            self.cache.clear()  # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô cache
            self.timestamps.clear()  # ‡∏•‡∏ö timestamp ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

# Global cache
data_cache = DataCache()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á global cache object

# ===== ARDUINO MANAGER - SIMPLIFIED =====
class ArduinoManager:  # ‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö Arduino
    def __init__(self):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á instance
        self.serial_conn = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö serial connection object
        self.connected = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        
    def connect(self) -> bool:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino ‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏°‡∏µ delays
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino ‡πÅ‡∏ö‡∏ö immediate - No delays!"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
            if not SERIAL_AVAILABLE:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ serial module ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if ERROR_HANDLER_AVAILABLE:  # ‡∏´‡∏≤‡∏Å error handler ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                    handle_hardware_error("ArduinoManager", "Serial not available", {"serial_available": False})  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ error handler
                else:  # ‡∏´‡∏≤‡∏Å error handler ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                    logger.error("Serial not available")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
                return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                
            logger.info(f"Connecting to Arduino on {Config.ARDUINO_PORT}...")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            
            self.serial_conn = serial.Serial(  # ‡∏™‡∏£‡πâ‡∏≤‡∏á serial connection object
                Config.ARDUINO_PORT,  # ‡πÉ‡∏ä‡πâ port ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Config
                Config.ARDUINO_BAUD,  # ‡πÉ‡∏ä‡πâ baud rate ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Config
                timeout=Config.ARDUINO_TIMEOUT  # ‡πÉ‡∏ä‡πâ timeout ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Config
            )
            
            # ‚ö° IMMEDIATE CONNECTION - No time.sleep delays!
            self.serial_conn.flushInput()  # ‡∏•‡πâ‡∏≤‡∏á input buffer ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            self.serial_conn.flushOutput()  # ‡∏•‡πâ‡∏≤‡∏á output buffer ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            
            self.connected = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô True
            logger.info("‚úÖ Arduino connected immediately")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            return True  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                
        except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            if ERROR_HANDLER_AVAILABLE:  # ‡∏´‡∏≤‡∏Å error handler ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                handle_communication_error("ArduinoManager", f"Arduino connection failed: {e}", {"port": Config.ARDUINO_PORT, "baud": Config.ARDUINO_BAUD}, e)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ error handler
            else:  # ‡∏´‡∏≤‡∏Å error handler ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                logger.error(f"Arduino connection failed: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
            self.connected = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô False
            return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    
    def read_sensors(self) -> Dict[str, Any]:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Arduino Protocol
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Arduino Protocol"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        # Check cache first
        cached_data = data_cache.get("sensors")  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache ‡∏Å‡πà‡∏≠‡∏ô
        if cached_data:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache
            return cached_data  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache
        
        if not self.connected:  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Arduino
            return {}  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dictionary ‡∏ß‡πà‡∏≤‡∏á
            
        # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor
        sensor_commands = ['GET_DATA', 'GET_SENSORS', 'STATUS', 'FULLDATA']  # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor
        
        for cmd in sensor_commands:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
                logger.info(f"Trying sensor command: {cmd}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á
                
                # ‡∏•‡πâ‡∏≤‡∏á buffer ‡∏Å‡πà‡∏≠‡∏ô
                self.serial_conn.flushInput()  # ‡∏•‡πâ‡∏≤‡∏á input buffer
                self.serial_conn.flushOutput()  # ‡∏•‡πâ‡∏≤‡∏á output buffer
                
                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
                self.serial_conn.write(f'{cmd}\n'.encode())  # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Arduino
                self.serial_conn.flush()  # flush ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                
                # ‡∏£‡∏≠ response
                start_time = time.time()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                all_responses = []  # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö response ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                
                # Event-driven response reading - no time-based loops
                max_attempts = 30  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                attempt = 0  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
                
                while attempt < max_attempts and self.serial_conn.in_waiting >= 0:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
                    if self.serial_conn.in_waiting > 0:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡πÉ‡∏ô buffer
                        response = self.serial_conn.readline().decode('utf-8', errors='ignore').strip()  # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string
                        if response:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• response
                            all_responses.append(response)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° response ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô list
                            logger.info(f"Arduino response: {response}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• response
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response patterns
                            if self._is_sensor_response(response):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô sensor response ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                                sensor_data = self._parse_sensor_response(response)  # ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor
                                if sensor_data:  # ‡∏´‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                    firebase_data = self._convert_to_firebase(sensor_data)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Firebase
                                    data_cache.set("sensors", firebase_data)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache
                                    logger.info(f"‚úÖ Sensor data parsed: {firebase_data}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                    return firebase_data  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor
                    
                    attempt += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
                    if attempt >= max_attempts:  # ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß
                        break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
                
                if all_responses:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ response ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà sensor data
                    logger.info(f"Got responses but no sensor data for {cmd}: {all_responses}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                
            except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                if ERROR_HANDLER_AVAILABLE:  # ‡∏´‡∏≤‡∏Å error handler ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                    handle_hardware_error("ArduinoManager", f"Sensor read error with {cmd}: {e}", {"command": cmd}, e)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ error handler
                else:  # ‡∏´‡∏≤‡∏Å error handler ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                    logger.error(f"Sensor read error with {cmd}: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
                continue  # ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
        logger.warning("‚ùå No sensor data available from any command")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        return {}  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dictionary ‡∏ß‡πà‡∏≤‡∏á
    
    def _is_sensor_response(self, response: str) -> bool:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        sensor_keywords = ['temp', 'humid', 'weight', 'distance', 'T:', 'H:', 'W:', 'D:']  # ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor
        response_lower = response.lower()  # ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
        return any(keyword.lower() in response_lower for keyword in sensor_keywords)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô response
    
    def _parse_sensor_response(self, response: str) -> Dict[str, float]:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á sensor response ‡πÄ‡∏õ‡πá‡∏ô dictionary
        """‡πÅ‡∏õ‡∏•‡∏á sensor response ‡πÄ‡∏õ‡πá‡∏ô structured data"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
            if response.startswith('{') and response.endswith('}'):  # ‡∏´‡∏≤‡∏Å response ‡πÄ‡∏õ‡πá‡∏ô JSON format
                data = json.loads(response)  # ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô dictionary
                return {k: float(v) for k, v in data.items() if isinstance(v, (int, float))}  # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô float
            
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö key:value pairs separated by commas
            if ',' in response and ':' in response:  # ‡∏´‡∏≤‡∏Å response ‡∏°‡∏µ comma ‡πÅ‡∏•‡∏∞ colon
                pairs = response.split(',')  # ‡πÅ‡∏¢‡∏Å response ‡∏î‡πâ‡∏ß‡∏¢ comma
                data = {}  # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏ß‡πà‡∏≤‡∏á
                for pair in pairs:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô key-value pairs
                    if ':' in pair:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ colon
                        key, value = pair.split(':', 1)  # ‡πÅ‡∏¢‡∏Å key ‡πÅ‡∏•‡∏∞ value
                        try:  # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á value ‡πÄ‡∏õ‡πá‡∏ô float
                            data[key.strip()] = float(value.strip())  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô dictionary
                        except ValueError:  # ‡∏´‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
                return data  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dictionary
            
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö simple space-separated
            return self._parse_simple_data(response)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
            
        except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            logger.error(f"Parse sensor response error: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
            return {}  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dictionary ‡∏ß‡πà‡∏≤‡∏á
    
    def send_command(self, command: str) -> bool:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Arduino
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Arduino - ‡πÑ‡∏°‡πà‡∏£‡∏≠ response ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        if not self.connected or not self.serial_conn:  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ serial connection
            logger.error("Arduino not connected")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
            return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False
            
        try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try
            # Translate web commands to Arduino commands
            arduino_cmd = self._translate_command(command)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å web ‡πÄ‡∏õ‡πá‡∏ô Arduino command
            
            logger.info(f"Sending Arduino command: {arduino_cmd}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
            
            # ‡∏•‡πâ‡∏≤‡∏á buffer ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            self.serial_conn.flushInput()  # ‡∏•‡πâ‡∏≤‡∏á input buffer
            self.serial_conn.flushOutput()  # ‡∏•‡πâ‡∏≤‡∏á output buffer
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏≠ response
            self.serial_conn.write(f'{arduino_cmd}\n'.encode())  # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Arduino
            self.serial_conn.flush()  # flush ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            
            logger.info(f"‚úÖ Command sent successfully: {arduino_cmd}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            return True  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True
            
        except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            if ERROR_HANDLER_AVAILABLE:  # ‡∏´‡∏≤‡∏Å error handler ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                handle_communication_error("ArduinoManager", f"Send command failed: {e}", {"command": command}, e)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ error handler
            else:  # ‡∏´‡∏≤‡∏Å error handler ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                logger.error(f"Send command failed {command}: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
            return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False
    
    def _translate_command(self, command: str) -> str:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å web ‡πÄ‡∏õ‡πá‡∏ô Arduino command
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Web API ‡πÄ‡∏õ‡πá‡∏ô Arduino Protocol"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        # Direct Arduino commands - ‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á‡πÑ‡∏õ
        if ':' in command or command in ['STATUS', 'PING', 'GET_DATA', 'GET_SENSORS', 'FULLDATA']:  # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            return command  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
        
        # Web command mappings
        command_map = {  # dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mapping ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            # LED Control
            'led_on': 'R:1',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î LED
            'led_off': 'R:4',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î LED
            
            # Fan Control  
            'fan_on': 'R:2',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î Fan
            'fan_off': 'R:0',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î Fan
            
            # Feed Control
            'feed': 'FEED',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            'feed_now': 'FEED_NOW',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            
            # Actuator Control
            'actuator_open': 'A:1',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î Actuator
            'actuator_close': 'A:0',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î Actuator
            
            # Auger Control
            'auger_forward': 'G:1',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô Auger ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
            'auger_reverse': 'G:-1',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô Auger ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            'auger_stop': 'G:0',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î Auger
            
            # Blower Control
            'blower_low': 'B:64',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î Blower ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡πà‡∏≥
            'blower_medium': 'B:128',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î Blower ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏•‡∏≤‡∏á
            'blower_high': 'B:255',  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î Blower ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á
            'blower_off': 'B:0'  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î Blower
        }
        
        return command_map.get(command, command)  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô map
    
    def _parse_simple_data(self, data_str: str) -> Dict[str, float]:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å string
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö KEY:VALUE"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        result = {}  # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        
        # ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ comma
        pairs = data_str.replace(' ', '').split(',')  # ‡∏•‡∏ö space ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ comma
        for pair in pairs:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô key-value pairs
            if ':' in pair:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ colon
                key, value = pair.split(':', 1)  # ‡πÅ‡∏¢‡∏Å key ‡πÅ‡∏•‡∏∞ value
                try:  # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á value ‡πÄ‡∏õ‡πá‡∏ô float
                    result[key] = float(value)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô dictionary
                except ValueError:  # ‡∏´‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                    pass  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
        return result  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dictionary
    
    def _convert_to_firebase(self, simple_data: Dict[str, float]) -> Dict[str, Any]:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Firebase
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        firebase_data = {  # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase
            "temperature": simple_data.get('TEMP1', simple_data.get('temp', 0.0)),  # ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
            "humidity": simple_data.get('HUM1', simple_data.get('humid', 0.0)),  # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
            "weight": simple_data.get('WEIGHT1', simple_data.get('weight', 0.0)),  # ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
            "distance": simple_data.get('DIST1', simple_data.get('distance', 0.0)),  # ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
            "timestamp": datetime.now().isoformat(),  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO
            "status": "online",  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
            "raw_data": simple_data  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
        }
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        if 'PH' in simple_data:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ pH
            firebase_data["ph"] = simple_data['PH']  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ pH
        if 'DO' in simple_data:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Dissolved Oxygen
            firebase_data["dissolved_oxygen"] = simple_data['DO']  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ DO
        if 'TUR' in simple_data:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô
            firebase_data["turbidity"] = simple_data['TUR']  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô
        
        return firebase_data  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Firebase
    
    def disconnect(self):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try
            if self.serial_conn:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ serial connection
                self.serial_conn.close()  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                self.serial_conn = None  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô None
            self.connected = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô False
            logger.info("Arduino disconnected")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            logger.error(f"Disconnect error: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error

# ===== FIREBASE MANAGER - SIMPLIFIED =====
class FirebaseManager:  # ‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firebase
    def __init__(self):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á instance
        self.db_ref = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö database reference
        self.initialized = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    def initialize(self) -> bool:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase connection"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try
            if not FIREBASE_AVAILABLE:  # ‡∏´‡∏≤‡∏Å Firebase ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                logger.warning("Firebase not available")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ service account key file
            key_files = [  # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå key ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                "config/firebase-service-account.json",  # ‡πÑ‡∏ü‡∏•‡πå key ‡∏´‡∏•‡∏±‡∏Å
                "firebase-service-account.json",  # ‡πÑ‡∏ü‡∏•‡πå key ‡∏™‡∏≥‡∏£‡∏≠‡∏á 1
                "serviceAccountKey.json"  # ‡πÑ‡∏ü‡∏•‡πå key ‡∏™‡∏≥‡∏£‡∏≠‡∏á 2
            ]
            
            key_file = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            for file_path in key_files:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå key
                if Path(file_path).exists():  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                    key_file = file_path  # ‡πÄ‡∏Å‡πá‡∏ö path ‡πÑ‡∏ü‡∏•‡πå
                    break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
            
            if not key_file:  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå key
                logger.error("Firebase service account key not found")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
                return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase
            cred = credentials.Certificate(key_file)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á credentials ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå key
            firebase_admin.initialize_app(cred, {'databaseURL': Config.FIREBASE_URL})  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase app
            self.db_ref = db.reference()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á database reference
            self.initialized = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô True
            logger.info("‚úÖ Firebase initialized successfully")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            return True  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True
            
        except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            logger.error(f"Firebase initialization failed: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
            self.initialized = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô False
            return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False
    
    def sync_sensor_data(self, data: Dict[str, Any]) -> bool:  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡πÑ‡∏õ Firebase
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡πÑ‡∏õ Firebase (‡∏´‡∏≤‡∏Å available)"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        if not self.initialized or not data:  # ‡∏´‡∏≤‡∏Å Firebase ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False
            
        try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡πÉ‡∏ô Firebase
            self.db_ref.child('sensors').set(data)  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡πÑ‡∏õ Firebase
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° log entry
            log_entry = {  # ‡∏™‡∏£‡πâ‡∏≤‡∏á log entry
                "timestamp": data.get("timestamp", datetime.now().isoformat()),  # ‡πÄ‡∏ß‡∏•‡∏≤
                "type": "sensor_data",  # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                "data": data  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            }
            self.db_ref.child('logs').push(log_entry)  # ‡∏™‡πà‡∏á log ‡πÑ‡∏õ Firebase
            
            logger.info("‚úÖ Sensor data synced to Firebase")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            return True  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True
            
        except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            logger.error(f"Firebase sync failed: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
            return False  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False

# ===== FIREBASE COMMAND LISTENER =====
class FirebaseCommandListener:
    """Firebase Command Listener - ‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Firebase ‡πÅ‡∏ö‡∏ö Real-time"""
    
    def __init__(self, arduino_manager: ArduinoManager, firebase_manager: FirebaseManager):
        self.arduino_mgr = arduino_manager
        self.firebase_mgr = firebase_manager
        self.listening = False
        self.command_ref = None
        
    def start_listening(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á Firebase commands"""
        if not FIREBASE_AVAILABLE or not self.firebase_mgr.connected:
            logger.warning("Firebase not available - Command listener disabled")
            return False
    
        try:
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö /controls/ path
            self.command_ref = db.reference('/controls')
            self.command_ref.listen(self._on_command_received)
            self.listening = True
            logger.info("üéß Firebase Command Listener started - Listening to /controls/")
            return True
            
        except Exception as e:
            logger.error(f"Failed to start Firebase listener: {e}")
            return False
    
    def _on_command_received(self, event):
        """Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Firebase"""
        try:
            if event.data is None:
                return
                
            logger.info(f"üì° Firebase command received: {event.data}")
            
            # ‡πÅ‡∏õ‡∏•‡∏á Firebase command ‡πÄ‡∏õ‡πá‡∏ô Arduino command
            arduino_cmd = self._translate_firebase_command(event.data)
            
            if arduino_cmd:
                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Arduino
                success = self.arduino_mgr.send_command(arduino_cmd)
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Firebase
                response_data = {
                    'timestamp': datetime.now().isoformat(),
                    'success': success,
                    'arduino_command': arduino_cmd,
                    'original_command': event.data
                }
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á /status/last_command/
                try:
                    db.reference('/status/last_command').set(response_data)
                    logger.info(f"‚úÖ Command processed: {arduino_cmd} (Success: {success})")
                except:
                    logger.warning("Failed to update Firebase status")
                    
            except Exception as e:
            logger.error(f"Error processing Firebase command: {e}")
    
    def _translate_firebase_command(self, command_data) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á Firebase JSON command ‡πÄ‡∏õ‡πá‡∏ô Arduino serial command"""
        try:
            # ‡∏´‡∏≤‡∏Å command_data ‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
            if isinstance(command_data, str):
                try:
                    command_data = json.loads(command_data)
                except:
                    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡∏ï‡∏£‡∏á‡πÜ
                    return command_data
            
            # ‡∏´‡∏≤‡∏Å command_data ‡πÄ‡∏õ‡πá‡∏ô dict ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏° format
            if isinstance(command_data, dict):
                
                # ===== RELAY COMMANDS =====
                if 'relay' in command_data:
                    relay_data = command_data['relay']
                    if isinstance(relay_data, dict):
                        if relay_data.get('in1') and relay_data.get('in2'):
                            return 'R:5'  # Both ON
                        elif relay_data.get('in1'):
                            return 'R:1'  # IN1 ON
                        elif relay_data.get('in2'):
                            return 'R:3'  # IN2 ON
                        else:
                            return 'R:0'  # Both OFF
                    elif relay_data == 'on' or relay_data == 1:
                        return 'R:1'
                    elif relay_data == 'off' or relay_data == 0:
                        return 'R:0'
                
                # ===== AUGER COMMANDS =====
                if 'auger' in command_data:
                    auger_cmd = command_data['auger']
                    if auger_cmd == 'forward' or auger_cmd == 1:
                        return 'G:1'
                    elif auger_cmd == 'reverse' or auger_cmd == -1:
                        return 'G:2'
                    elif auger_cmd == 'stop' or auger_cmd == 0:
                        return 'G:0'
                    elif auger_cmd == 'test':
                        return 'G:3'
                
                # ===== BLOWER COMMANDS =====
                if 'blower' in command_data:
                    blower_data = command_data['blower']
                    if isinstance(blower_data, dict):
                        if 'pwm' in blower_data:
                            pwm_value = blower_data['pwm']
                            if pwm_value > 0:
                                return 'B:1'  # ON
                            else:
                                return 'B:0'  # OFF
                        elif blower_data.get('status') == 'on':
                            return 'B:1'
            else:
                            return 'B:0'
                    elif blower_data == 'on' or blower_data == 1:
                        return 'B:1'
                    elif blower_data == 'off' or blower_data == 0:
                        return 'B:0'
                
                # ===== ACTUATOR COMMANDS =====
                if 'actuator' in command_data:
                    actuator_cmd = command_data['actuator']
                    if actuator_cmd == 'extend' or actuator_cmd == 'up' or actuator_cmd == 1:
                        return 'A:1'
                    elif actuator_cmd == 'retract' or actuator_cmd == 'down' or actuator_cmd == 2:
                        return 'A:2'
                    elif actuator_cmd == 'stop' or actuator_cmd == 0:
                        return 'A:0'
                
                # ===== SENSOR COMMANDS =====
                if 'sensor' in command_data:
                    sensor_cmd = command_data['sensor']
                    if sensor_cmd == 'read' or sensor_cmd == 'get':
                        return 'GET_SENSORS'
                    elif sensor_cmd == 'status':
                        return 'STATUS'
                
                # ===== FEED COMMANDS =====
                if 'feed' in command_data:
                    feed_data = command_data['feed']
                    if isinstance(feed_data, dict):
                        if 'amount' in feed_data:
                            amount = feed_data['amount']
                            return f'FEED:{amount}'
                        elif 'size' in feed_data:
                            size = feed_data['size']
                            return f'FEED:{size}'
                    elif isinstance(feed_data, (int, float)):
                        return f'FEED:{feed_data}'
                    elif feed_data in ['small', 'medium', 'large']:
                        return f'FEED:{feed_data}'
                
                # ===== CALIBRATION COMMANDS =====
                if 'calibrate' in command_data:
                    cal_data = command_data['calibrate']
                    if cal_data == 'weight' or cal_data == 'hx711':
                        return 'CAL:tare'
                    elif isinstance(cal_data, dict) and 'weight' in cal_data:
                        weight = cal_data['weight']
                        return f'CAL:weight:{weight}'
                
                # ===== SYSTEM COMMANDS =====
                if 'system' in command_data:
                    sys_cmd = command_data['system']
                    if sys_cmd == 'status':
                        return 'STATUS'
                    elif sys_cmd == 'test':
                        return 'TEST'
                    elif sys_cmd == 'reset':
                        return 'INIT'
                
                # ===== GENERIC COMMAND =====
                if 'command' in command_data:
                    return command_data['command']
            
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö pattern ‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô string
            return str(command_data)
            
        except Exception as e:
            logger.error(f"Error translating Firebase command: {e}")
            return None
    
    def stop_listening(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á Firebase commands"""
        if self.command_ref and self.listening:
            try:
                self.command_ref.listen(lambda x: None)  # Stop listening
                self.listening = False
                logger.info("üîá Firebase Command Listener stopped")
            except Exception as e:
                logger.error(f"Error stopping Firebase listener: {e}")

# ===== WEB API - OPTIMIZED =====
class WebAPI:  # ‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web API
    def __init__(self, arduino_mgr: ArduinoManager, firebase_mgr: FirebaseManager):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á instance
        self.arduino_mgr = arduino_mgr  # ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á Arduino Manager
        self.firebase_mgr = firebase_mgr  # ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á Firebase Manager
        
        if not FLASK_AVAILABLE:  # ‡∏´‡∏≤‡∏Å Flask ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            logger.error("Flask not available - Web API disabled")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
            return  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
            
        self.app = Flask(__name__)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask app
        
        # Enable CORS for all routes
        if 'CORS' in globals():  # ‡∏´‡∏≤‡∏Å CORS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            CORS(self.app, resources={  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS
                r"/api/*": {  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API routes
                    "origins": ["http://localhost:3000", "http://127.0.0.1:3000"],  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï origins
                    "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï HTTP methods
                    "allow_headers": ["Content-Type", "Authorization"]  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï headers
                }
            })
        
        self._setup_routes()  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ routes
    
    def _setup_routes(self):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API routes
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Routes"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        
        @self.app.route('/api/health')  # ‡∏™‡∏£‡πâ‡∏≤‡∏á health check endpoint
        def health():  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô health check
            """Health check endpoint"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
            return jsonify({  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ JSON response
                "status": "healthy",  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
                "timestamp": datetime.now().isoformat(),  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                "arduino_connected": self.arduino_mgr.connected,  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino
                "firebase_available": self.firebase_mgr.initialized  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Firebase
            })
        
        @self.app.route('/api/sensors')  # ‡∏™‡∏£‡πâ‡∏≤‡∏á sensors endpoint
        def get_sensors():  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensors
            """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensors ‡∏à‡∏≤‡∏Å Arduino"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
            try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try
                sensor_data = self.arduino_mgr.read_sensors()  # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensors ‡∏à‡∏≤‡∏Å Arduino
                
                if sensor_data:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensors
                    # Sync ‡πÑ‡∏õ Firebase ‡∏´‡∏≤‡∏Å available
                    if self.firebase_mgr.initialized:  # ‡∏´‡∏≤‡∏Å Firebase ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                        self.firebase_mgr.sync_sensor_data(sensor_data)  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Firebase
                    
                    return jsonify({  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ JSON response ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        "success": True,  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        "data": sensor_data,  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensors
                        "cached": False,  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache
                        "timestamp": datetime.now().isoformat()  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    })
                else:  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensors
                    return jsonify({  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ JSON response ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        "success": False,  # ‡∏™‡∏ò‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        "error": "No sensor data available",  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
                        "data": {},  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á
                        "timestamp": datetime.now().isoformat()  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    }), 503  # HTTP status code 503
                    
            except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                logger.error(f"Sensor read error: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
                return jsonify({  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ JSON response error
                    "success": False,  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    "error": str(e),  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
                    "timestamp": datetime.now().isoformat()  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                }), 500  # HTTP status code 500

# ===== MAIN CONTROLLER - WITH FIREBASE LISTENER =====
class FishFeederController:  # ‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö Fish Feeder
    def __init__(self, **options):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.options = options  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.running = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        
        # Initialize managers
        self.arduino_mgr = ArduinoManager()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Arduino Manager
        self.firebase_mgr = FirebaseManager()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase Manager
        self.web_api = WebAPI(self.arduino_mgr, self.firebase_mgr)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Web API ‡∏û‡∏£‡πâ‡∏≠‡∏° managers
        
        # Initialize Firebase Command Listener
        self.firebase_listener = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Firebase Listener
        if FIREBASE_LISTENER_AVAILABLE:  # ‡∏´‡∏≤‡∏Å Firebase Listener ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            self.firebase_listener = FirebaseCommandListener(  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase Command Listener
                arduino_manager=self.arduino_mgr,  # ‡∏™‡πà‡∏á Arduino Manager
                logger=logger  # ‡∏™‡πà‡∏á logger
            )
        
    def start(self):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        logger.info("üöÄ Starting Fish Feeder System...")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        
        # Connect Arduino
        if not self.options.get('no_arduino', False):  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Arduino
            self.arduino_mgr.connect()  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino
        
        # Initialize Firebase
        if not self.options.get('no_firebase', False):  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Firebase
            self.firebase_mgr.initialize()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase
            
            # Start Firebase Command Listener
            if self.firebase_listener:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Firebase Listener
                firebase_init_success = self.firebase_listener.initialize(  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase Listener
                    Config.FIREBASE_URL,  # ‡∏™‡πà‡∏á Firebase URL
                    "config/firebase-service-account.json"  # ‡∏™‡πà‡∏á service account key file
                )
                if firebase_init_success:  # ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    self.firebase_listener.start_listening()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á Firebase commands
                    logger.info("üî• Firebase Command Listener active")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                else:  # ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    logger.warning("‚ö†Ô∏è Firebase Command Listener failed to start")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        
        # Start web server
        host = self.options.get('host', Config.WEB_HOST)  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ host ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        port = self.options.get('port', Config.WEB_PORT)  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ port ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        logger.info(f"üåê Web server starting on http://{host}:{port}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• web server
        logger.info("üìä Health: http://localhost:5000/api/health")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log health check URL
        logger.info("üîß Debug: http://localhost:5000/api/debug/test-commands")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log debug URL
        logger.info("üéØ System ready - Firebase Commands Active!")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        
        try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô web server
            # Run Flask server with Firebase listener
            self.web_api.app.run(  # ‡∏£‡∏±‡∏ô Flask app
                host=host,  # ‡πÉ‡∏ä‡πâ host ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                port=port,  # ‡πÉ‡∏ä‡πâ port ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                debug=False,  # ‡∏õ‡∏¥‡∏î debug mode
                use_reloader=False,  # ‡∏õ‡∏¥‡∏î reloader
                threaded=True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô threading
            )
        except KeyboardInterrupt:  # ‡∏à‡∏±‡∏ö KeyboardInterrupt (Ctrl+C)
            logger.info("üëã Server interrupted")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            logger.error(f"Web server failed: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error
            raise  # ‡∏™‡πà‡∏á exception ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    
    def shutdown(self):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
        """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        logger.info("üõë Shutting down...")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
        self.running = False  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô False
        
        # Force stop Firebase listener immediately
        if self.firebase_listener:  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Firebase Listener
            try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try
                self.firebase_listener.stop_listening()  # ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á Firebase commands
            except:  # ‡∏à‡∏±‡∏ö exception ‡πÉ‡∏î‡πÜ
                pass  # ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à error
            
        # Force disconnect Arduino immediately
        try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try
            self.arduino_mgr.disconnect()  # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Arduino
        except:  # ‡∏à‡∏±‡∏ö exception ‡πÉ‡∏î‡πÜ
            pass  # ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à error
            
        logger.info("‚úÖ Shutdown complete")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô

# ===== MAIN =====
def main():  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    """Main entry point"""  # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    parser = argparse.ArgumentParser(description="Fish Feeder IoT System - Optimized")  # ‡∏™‡∏£‡πâ‡∏≤‡∏á argument parser
    parser.add_argument('--no-arduino', action='store_true', help='Skip Arduino')  # ‡πÄ‡∏û‡∏¥‡πà‡∏° argument ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏° Arduino
    parser.add_argument('--no-firebase', action='store_true', help='Skip Firebase')  # ‡πÄ‡∏û‡∏¥‡πà‡∏° argument ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏° Firebase
    parser.add_argument('--host', default='0.0.0.0', help='Web server host')  # ‡πÄ‡∏û‡∏¥‡πà‡∏° argument ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö host
    parser.add_argument('--port', type=int, default=5000, help='Web server port')  # ‡πÄ‡∏û‡∏¥‡πà‡∏° argument ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö port
    args = parser.parse_args()  # ‡πÅ‡∏õ‡∏•‡∏á command line arguments
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üêü FISH FEEDER IoT SYSTEM - OPTIMIZED                    ‚ïë
‚ïë                         ON-DEMAND PERFORMANCE MODE                           ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  ‚úÖ No Background Loops    ‚îÇ  ‚ö° Fast Response      ‚îÇ  üíæ Smart Caching     ‚ïë
‚ïë  üéØ On-Demand API Calls    ‚îÇ  üì° Efficient Arduino ‚îÇ  üåê Web-First Design  ‚ïë
‚ïë  üöÄ Better Performance     ‚îÇ  üí° Reduced Logging   ‚îÇ  üîß Simplified Code   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
    
    try:  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å try ‡∏´‡∏•‡∏±‡∏Å
        controller = FishFeederController(  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Fish Feeder Controller
            no_arduino=args.no_arduino,  # ‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å no_arduino
            no_firebase=args.no_firebase,  # ‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å no_firebase
            host=args.host,  # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ host
            port=args.port  # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ port
        )
        
        shutdown_called = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å shutdown ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        def signal_handler(sig, frame):  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ signal
            nonlocal shutdown_called  # ‡πÉ‡∏ä‡πâ nonlocal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ shutdown_called
            if shutdown_called:  # ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å shutdown ‡πÅ‡∏•‡πâ‡∏ß
                logger.info("‚ö†Ô∏è Shutdown already in progress...")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                return  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
            shutdown_called = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å shutdown ‡πÅ‡∏•‡πâ‡∏ß
            logger.info("Shutdown requested")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ shutdown
            controller.shutdown()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô shutdown
            sys.exit(0)  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    
        signal.signal(signal.SIGINT, signal_handler)  # ‡∏ú‡∏π‡∏Å signal handler ‡∏Å‡∏±‡∏ö SIGINT
        signal.signal(signal.SIGTERM, signal_handler)  # ‡∏ú‡∏π‡∏Å signal handler ‡∏Å‡∏±‡∏ö SIGTERM
        
        controller.start()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô controller
        
    except KeyboardInterrupt:  # ‡∏à‡∏±‡∏ö KeyboardInterrupt
        logger.info("üëã Shutdown by user")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    except Exception as e:  # ‡∏à‡∏±‡∏ö exception ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        logger.error(f"‚ùå Fatal error: {e}")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log error ‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á
        return 1  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ exit code 1
    finally:  # ‡∏ö‡∏•‡πá‡∏≠‡∏Å finally ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        if 'controller' in locals():  # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ controller ‡πÉ‡∏ô local variables
            controller.shutdown()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô shutdown
    
    return 0  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ exit code 0 (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)

if __name__ == "__main__":  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    sys.exit(main())  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô main ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢ exit code ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
