#include "../../weight_sensor.h"

WeightSensor::WeightSensor(uint8_t doutPin, uint8_t sckPin) 
: doutPin(doutPin), sckPin(sckPin), calibration_factor(1.0), offset(0) {
scale = new HX711();
}

WeightSensor::~WeightSensor() {
delete scale;
}

void WeightSensor::begin() {
scale->begin(doutPin, sckPin);
delay(1000); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ HX711 ‡∏û‡∏£‡πâ‡∏≠‡∏°

// Test if HX711 is responding
Serial.print("üì¶ HX711 Load Cell initializing... ");

// ‡∏£‡∏≠‡πÉ‡∏´‡πâ HX711 ‡∏û‡∏£‡πâ‡∏≠‡∏°
int attempts = 0;
while (!scale->is_ready() && attempts < 10) {
delay(100);
attempts++;
}

if (scale->is_ready()) {
Serial.println("SUCCESS ‚úÖ");
loadCalibration();

// Test reading
long testReading = scale->read();
Serial.print("üì• Raw reading: ");
Serial.println(testReading);

if (testReading != 0) {
Serial.println("üìå HX711 is responding normally");
} else {
Serial.println("‚ö†Ô∏è WARNING: Zero reading - check connections");
}
} else {
Serial.println("FAILED ‚ùå - HX711 not responding");
Serial.println("üîß Check DOUT and SCK connections");
Serial.print("üìç DOUT Pin: ");
Serial.print(doutPin);
Serial.print(", SCK Pin: ");
Serial.println(sckPin);
}
}

bool WeightSensor::readWeight(float& weight) {
if (scale->is_ready()) {
long reading = scale->read_average(3);
weight = (reading - offset) / calibration_factor;
return isValidReading(weight);
}
weight = -999;
return false;
}

void WeightSensor::calibrate(float knownWeight) {
if (scale->is_ready()) {
Serial.print("üéØ Starting calibration with ");
Serial.print(knownWeight, 3);
Serial.println(" kg");

// Get average reading (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
long reading = scale->read_average(10);

if (reading == 0) {
Serial.println("‚ùå ERROR: No signal from weight sensor");
return;
}

// Calculate scale factor (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
calibration_factor = reading / knownWeight;

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á EEPROM
saveCalibration();

Serial.println("‚úÖ Calibration successful:");
Serial.print("   ‚Ü™ Known weight: "); Serial.print(knownWeight, 3); Serial.println(" kg");
Serial.print("   ‚Ü™ Raw reading: "); Serial.println(reading, 3);
Serial.print("   ‚Ü™ Scale factor: "); Serial.println(calibration_factor, 6);
Serial.print("   ‚Ü™ Offset: "); Serial.println(offset);
Serial.println("üíæ Saved to EEPROM");
}
}

void WeightSensor::resetCalibration() {
// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
calibration_factor = 0.0;
offset = 0;

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á EEPROM
EEPROM.put(EEPROM_SCALE_ADDR, calibration_factor);
EEPROM.put(EEPROM_OFFSET_ADDR, offset);

Serial.println("üßπ Reset calibration (scaleFactor = 0.0, offset = 0)");
Serial.println("ÔøΩÔøΩ Saved to EEPROM");
}

void WeightSensor::tare() {
if (scale->is_ready()) {
Serial.println("‚öñÔ∏è Taring scale...");

// ‡πÉ‡∏ä‡πâ get_offset ‡πÅ‡∏ó‡∏ô read_average ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
scale->tare(5); // tare ‡∏î‡πâ‡∏ß‡∏¢ 5 ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
offset = scale->get_offset();

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á EEPROM
saveCalibration();

Serial.println("‚úÖ Scale tared (zero set)");
Serial.print("   ‚Ü™ New offset: "); 
Serial.println(offset);
Serial.println("üíæ Offset saved to EEPROM");
}
}

void WeightSensor::saveCalibration() {
// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
EEPROM.put(EEPROM_SCALE_ADDR, calibration_factor);
EEPROM.put(EEPROM_OFFSET_ADDR, offset);
}

void WeightSensor::loadCalibration() {
// ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å EEPROM ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
EEPROM.get(EEPROM_SCALE_ADDR, calibration_factor);
EEPROM.get(EEPROM_OFFSET_ADDR, offset);

Serial.print("üì• scaleFactor: ");
Serial.println(calibration_factor, 6);
Serial.print("üì• offset: ");
Serial.println(offset);

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
if (calibration_factor < 1.0 || calibration_factor > 100000.0 || isnan(calibration_factor)) {
Serial.println("‚ö†Ô∏è Invalid scale factor, please calibrate again");
calibration_factor = 1.0;
offset = 0;
// ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÉ‡∏´‡πâ user calibrate ‡πÄ‡∏≠‡∏á
} else {
// Apply calibration ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
scale->set_scale(calibration_factor);
scale->set_offset(offset);
Serial.println("‚úÖ Calibration loaded from EEPROM");
}
}

bool WeightSensor::isValidReading(float value) {
return !isnan(value) && value > -100.0 && value < 200.0;
}

void WeightSensor::printStatus() {
float weight;
bool valid = readWeight(weight);

Serial.print("‚öñÔ∏è Weight: ");
Serial.print(valid ? weight : -999);
Serial.print("kg [");
Serial.print(valid ? "OK ‚úÖ" : "ERROR ‚ùå");
Serial.println("]");
}

// ===== GLOBAL INSTANCE =====
WeightSensor weightSensor(HX711_DOUT_PIN, HX711_SCK_PIN); 