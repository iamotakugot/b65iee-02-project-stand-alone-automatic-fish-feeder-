// === actuator_control.ino ===
// ü¶æ ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Linear Actuator ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á ‡∏î‡πâ‡∏ß‡∏¢ PWM + ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (H-Bridge)

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Linear Actuator
#define ACT_ENA 11  // ‡∏Ç‡∏≤ PWM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
#define ACT_IN1 12  // ‡∏Ç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏î‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
#define ACT_IN2 13  // ‡∏Ç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô actuator
bool actuatorUsedLoad = false;
bool freezeBattery = false;
unsigned long actuatorStopTime = 0;

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Actuator ‡∏à‡∏≤‡∏Å Serial Command ===
void handleActuatorCommand(char cmd) {
  if (cmd == '1') {
    digitalWrite(ACT_IN1, HIGH);
    digitalWrite(ACT_IN2, LOW);
    analogWrite(ACT_ENA, 255);  // ‡∏î‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    actuatorUsedLoad = true;
    freezeBattery = true;
    actuatorStopTime = millis();
    Serial.println("Actuator ‡∏î‡∏±‡∏ô‡∏≠‡∏≠‡∏Å");
  } 
  else if (cmd == '2') {
    digitalWrite(ACT_IN1, LOW);
    digitalWrite(ACT_IN2, HIGH);
    analogWrite(ACT_ENA, 255);  // ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö
    actuatorUsedLoad = true;
    freezeBattery = true;
    actuatorStopTime = millis();
    Serial.println("Actuator ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö");
  } 
  else if (cmd == '0') {
    analogWrite(ACT_ENA, 0);  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ PWM
    actuatorUsedLoad = false;
    freezeBattery = false;
    actuatorStopTime = millis();
    Serial.println("Actuator ‡∏´‡∏¢‡∏∏‡∏î");
  }
}

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PIN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö actuator ===
void initActuatorControl() {
  pinMode(ACT_ENA, OUTPUT);
  pinMode(ACT_IN1, OUTPUT);
  pinMode(ACT_IN2, OUTPUT);
  analogWrite(ACT_ENA, 0);  // ‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
}

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup() ‡πÅ‡∏•‡∏∞ loop() ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ===
void setup() {
  Serial.begin(9600);
  initActuatorControl();
  Serial.println("Actuator control system ready.");
  Serial.println("Serial control commands:");
  Serial.println("  Press 1 = Extend actuator");
  Serial.println("  Press 2 = Retract actuator");
  Serial.println("  Press 0 = Stop actuator");
}

void loop() {
  if (Serial.available()) {
    char cmd = Serial.read();
    handleActuatorCommand(cmd);
  }
}

/*
üì° ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Web App:
- Web App ‡∏™‡πà‡∏á Serial Command ‡πÄ‡∏ä‡πà‡∏ô "A:1\n", "A:2\n", ‡∏´‡∏£‡∏∑‡∏≠ "A:0\n"
- Arduino ‡∏ù‡∏±‡πà‡∏á‡∏£‡∏±‡∏ö:
    if (input.startsWith("A:")) {
        char ch = input.charAt(2);
        handleActuatorCommand(ch);
    }
*/