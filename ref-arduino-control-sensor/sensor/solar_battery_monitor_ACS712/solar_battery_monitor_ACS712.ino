// === ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà (‡πÉ‡∏ä‡πâ ACS712-30A) ===
// ‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
// ‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏°‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà 12V (‡πÄ‡∏ï‡πá‡∏° ~12.7V) ‡πÅ‡∏ï‡πà‡πÅ‡∏ú‡∏á‡∏≠‡∏≤‡∏à‡πÉ‡∏´‡πâ ~18V
// ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á "‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô Solar > 5V" ‡πÅ‡∏•‡∏∞ "‡∏Å‡∏£‡∏∞‡πÅ‡∏™ Solar > 0.2A" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
// ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏ï‡∏∞‡∏Å‡∏±‡πà‡∏ß‡∏Å‡∏£‡∏î (Lead-Acid) ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Li-ion ‡∏´‡∏£‡∏∑‡∏≠ LiFePO4 ‡πÑ‡∏î‡πâ

// === Pin Mapping ===
const int solarVoltagePin = A3;  // ‡∏Ç‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå
const int solarCurrentPin = A4;  // ‡∏Ç‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå (‡∏ú‡πà‡∏≤‡∏ô ACS712)
const int loadVoltagePin  = A1;  // ‡∏Ç‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà)
const int loadCurrentPin  = A0;  // ‡∏Ç‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î (‡∏ú‡πà‡∏≤‡∏ô ACS712)

// === ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ===
const float vRef = 5.0;                 // ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á ADC
const float vFactor = 4.50;             // ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô (‡∏ï‡∏≤‡∏°‡∏ß‡∏á‡∏à‡∏£‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô)
const float sensitivity = 0.066;        // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡∏Ç‡∏≠‡∏á ACS712-30A (66 mV/A)
const float zeroCurrentVoltage = 2.500; // ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á (0A) ‡∏Ç‡∏≠‡∏á ACS712

int printCount = 1;                     // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
float lastBatteryPercent = 0.0;         // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô ===
// ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô Web App)
float estimateBatteryPercentage(float voltage) {
  const float minV = 11.70;  // ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ 0%
  const float maxV = 12.70;  // ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏° 100%
  if (voltage >= maxV) return 100.0;
  if (voltage <= minV) return 0.0;
  return ((voltage - minV) / (maxV - minV)) * 100.0;
}

// === ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô/‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ===
void readSensors(float& solarV, float& solarI, float& loadV, float& loadI) {
  const int sampleCount = 150;
  long sumVS = 0, sumIS = 0;
  long sumVL = 0, sumIL = 0;

  for (int i = 0; i < sampleCount; i++) {
    sumVS += analogRead(solarVoltagePin);  // ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÅ‡∏ú‡∏á
    sumIS += analogRead(solarCurrentPin);  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÅ‡∏ú‡∏á
    sumVL += analogRead(loadVoltagePin);   // ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î
    sumIL += analogRead(loadCurrentPin);   // ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÇ‡∏´‡∏•‡∏î
    delay(1);  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ ADC
  solarV = (sumVS / (float)sampleCount / 1023.0) * vRef * vFactor;
  loadV  = (sumVL / (float)sampleCount / 1023.0) * vRef * vFactor;

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß (offset ‡∏ä‡∏î‡πÄ‡∏ä‡∏¢ 0.5A)
  solarI = (((sumIS / (float)sampleCount) / 1023.0) * vRef - zeroCurrentVoltage) / sensitivity - 0.5;
  loadI  = (((sumIL / (float)sampleCount) / 1023.0) * vRef - zeroCurrentVoltage) / sensitivity;

  // ‡∏ï‡∏±‡∏î‡∏Ñ‡πà‡∏≤ noise ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏ï‡πà‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
  if (solarV < 1.0) solarV = 0.0;
  if (abs(solarI) < 0.50 || solarV < 1.0) solarI = 0.0;
  if (loadI < 0.0) loadI = -loadI;  // ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å
}

// === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ===
bool isCharging(float solarV, float solarI) {
  return (solarV > 5.0 && solarI > 0.2);
}

// === ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ ===
void printPowerReadings(float solarV, float solarI, float loadV, float loadI) {
  Serial.print(printCount++);
  Serial.print(" | ‚òÄÔ∏è Solar: "); Serial.print(solarV, 1); Serial.print(" V | "); Serial.print(solarI, 3); Serial.print(" A || ");
  Serial.print("üîã Load: "); Serial.print(loadV, 1); Serial.print(" V | "); Serial.print(loadI, 3); Serial.print(" A | ");
}

// === ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå) ===
void printBatteryStatus(float loadV, float solarV, float solarI) {
  lastBatteryPercent = estimateBatteryPercentage(loadV);
  Serial.print("Battery: ");
  if (isCharging(solarV, solarI)) {
    Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à...");
  } else {
    Serial.print(String(lastBatteryPercent, 1));
    Serial.println(" %");
  }
}

// === ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ===
void setup() {
  Serial.begin(9600);  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ô‡∏∏‡∏Å‡∏£‡∏°
}

// === ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏ô‡∏ã‡πâ‡∏≥ ===
void loop() {
  float solarV, solarI, loadV, loadI;
  readSensors(solarV, solarI, loadV, loadI);         // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
  printPowerReadings(solarV, solarI, loadV, loadI);  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô
  printBatteryStatus(loadV, solarV, solarI);         // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
  delay(2000);                                       // ‡∏´‡∏ô‡πà‡∏ß‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
}
